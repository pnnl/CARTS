---
alwaysApply: true
---
# CARTS Wrapper Script Usage

## Primary Rule: Always Use `carts` Script

**NEVER call underlying tools directly** (cgeist, carts-opt, carts-run, mlir-translate, clang). Always use the `carts` wrapper script for all operations.

## Why Use the Carts Script?

1. **Automatic Path Resolution**: Handles complex installation paths correctly
2. **Library Linking**: Automatically links required ARTS runtime libraries
3. **Environment Setup**: Sets correct include paths and library paths
4. **Cross-Platform Support**: Handles macOS vs Linux differences (e.g., rt library)
5. **Consistent Interface**: Unified command-line interface for all operations

## Correct Usage Examples

### DO: Use carts script
```bash
# Convert C++ to MLIR
carts cgeist simple.cpp -std=c++17 -fopenmp -O0 -S > simple.mlir

# Run MLIR optimizations
carts opt simple.mlir --lower-affine --cse --convert-openmp-to-arts

# Run ARTS transformations
carts run simple.mlir --O3 --arts-opt --emit-llvm

# Convert MLIR to LLVM IR
carts mlir-translate --mlir-to-llvmir simple.mlir > simple.ll

# Compile to executable
carts compile simple.ll -o simple

# Build project
carts build

# Setup environment
carts setup --add-to-path

# Clean generated files
carts clean

# Complete pipeline from C++ to executable
carts execute simple.cpp -o simple
```

### DON'T: Call tools directly
```bash
# Wrong - don't do this
cgeist simple.cpp -std=c++17 -fopenmp -O0 -S
carts-opt simple.mlir --lower-affine
carts-run simple.mlir --O3
mlir-translate --mlir-to-llvmir simple.mlir
clang simple.ll -larts -lomp -lrt -lpthread
```

## Available Commands

| Command | Purpose | Input | Output |
|---------|---------|-------|--------|
| `carts build` | Build CARTS project | - | - |
| `carts cgeist` | C++ to MLIR conversion | `.cpp` | `.mlir` |
| `carts opt` | MLIR optimizations | `.mlir` | `.mlir` |
| `carts run` | ARTS transformations | `.mlir` | `.mlir` or `.ll` |
| `carts mlir-translate` | MLIR to LLVM IR | `.mlir` | `.ll` |
| `carts compile` | LLVM IR to executable | `.ll` | executable |
| `carts benchmark` | Run benchmarks | - | results |
| `carts report` | Generate reports | - | reports |
| `carts setup` | Setup environment | - | - |
| `carts clean` | Clean generated files | - | - |
| `carts execute` | Complete pipeline | `.cpp` | executable |

## Environment Variables

```bash
CARTS_VERBOSE=1 carts <command>  # Enable verbose output
CARTS_INSTALL_DIR=/path/to/install  # Override install directory
```

## Error Handling

If you encounter path or library errors, the issue is likely that you're not using the `carts` script. The script handles:
- Library path resolution
- Include path setup
- Cross-platform library differences
- Installation directory detection

## Integration with Build System

The `carts` script integrates with the project's build system:
- Uses system clang for project builds
- Uses installed LLVM for ARTS operations
- Automatically detects installation directories
- Handles both source and installed locations
