---
alwaysApply: true
---
# C++ Coding Standards for CARTS

## LLVM Coding Standards
Follow LLVM coding standards: https://llvm.org/docs/CodingStandards.html

## Naming Conventions
- **Variables, Classes and structs**: `PascalCase`
- **Constants and macros**: `UPPER_CASE`
- **ARTS dialect operations**: `arts.operation_name`
- **Pass and functions names**: `createOperationNamePass()`
- **Analysis names**: `OperationNameAnalysis`

## Type Usage
- Prefer `auto` for type deduction when the type is obvious
- Use `const` wherever possible
- Use `std::` prefix for standard library types
- Use `llvm::` prefix for LLVM types
- Use `mlir::` prefix for MLIR types

## Memory Management
- Use RAII for resource management
- Avoid raw pointers when possible
- Use smart pointers for ownership

## Error Handling
- Use `mlir::failed()` for MLIR operations
- Use `llvm::Error` for LLVM operations
- Provide meaningful error messages
- Handle edge cases gracefully

## Performance Guidelines
- Minimize memory allocations
- Use efficient data structures
- Profile critical paths
- Consider cache locality

# C++ Coding Standards for CARTS

## LLVM Coding Standards
Follow LLVM coding standards: https://llvm.org/docs/CodingStandards.html

## Naming Conventions
- **Variables, Classes and structs**: `PascalCase`
- **Constants and macros**: `UPPER_CASE`
- **ARTS dialect operations**: `arts.operation_name`
- **Pass and functions names**: `createOperationNamePass()`
- **Analysis names**: `OperationNameAnalysis`

## Type Usage
- Prefer `auto` for type deduction when the type is obvious
- Use `const` wherever possible
- Use `std::` prefix for standard library types
- Use `llvm::` prefix for LLVM types
- Use `mlir::` prefix for MLIR types

## Memory Management
- Use RAII for resource management
- Avoid raw pointers when possible
- Use smart pointers for ownership
- Use ARTS runtime allocation functions (`artsMalloc`, `artsFree`) for better resource tracking

## Error Handling
- Use `mlir::failed()` for MLIR operations
- Use `llvm::Error` for LLVM operations
- Provide meaningful error messages
- Handle edge cases gracefully

## Performance Guidelines
- Minimize memory allocations
- Use efficient data structures
- Profile critical paths
- Consider cache locality
