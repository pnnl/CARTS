---
description: MLIR Pass Development for CARTS
alwaysApply: false
---
# MLIR Pass Development for CARTS

## Pass Location and Structure
- Passes should be in [lib/arts/Passes/](mdc:lib/arts/Passes/)
- Pass declarations in [include/arts/Passes/](mdc:include/arts/Passes/)
- Use `Pass` suffix for pass classes
- Implement `runOnOperation()` method

## Pass Template
```cpp
namespace {
struct MyARTSPass : public arts::MyARTSPassBase<MyARTSPass> {
  void runOnOperation() override {
    ModuleOp module = getOperation();
    MLIRContext *context = &getContext();
    
    // Pass implementation
    RewritePatternSet patterns(context);
    patterns.add<MyPattern>(context);
    
    if (failed(applyPatternsAndFoldGreedily(module, std::move(patterns))))
      return signalPassFailure();
  }
};
} // end namespace
```

## TableGen Pass Registration
Define passes in [include/arts/Passes/ArtsPasses.td](mdc:include/arts/Passes/ArtsPasses.td):
```tablegen
def MyARTSPass : Pass<"my-arts-pass", "mlir::ModuleOp"> {
  let summary = "My ARTS pass description";
  let dependentDialects = [
    "arts::ArtsDialect",
    "memref::MemRefDialect",
    "LLVM::LLVMDialect"
  ];
  let constructor = "mlir::arts::createMyARTSPass()";
  let options = [
    Option<"debug", "debug", "bool", /*default=*/"false",
           "Enable debug mode.">
  ];
}
```

## Common ARTS Pass Types
- **Conversion Passes**: OpenMP → ARTS, ARTS → LLVM
- **Optimization Passes**: EDT optimization, invariant code motion
- **Analysis Passes**: DataBlock identification, dependency analysis
- **Transformation Passes**: Code restructuring, pointer rematerialization

## Debug Support
```cpp
#define DEBUG_TYPE "my-arts-pass"
#define LINE "-----------------------------------------\n"
#define dbgs() (llvm::dbgs())
#define DBGS() (dbgs() << "[" DEBUG_TYPE "] ")

// Usage
LLVM_DEBUG(DBGS() << "Processing operation\n");
LLVM_DEBUG({
  dbgs() << LINE << "Pass STARTED\n" << LINE;
  module.dump();
});
```

## Error Handling
- Use `signalPassFailure()` for pass failures
- Provide meaningful error messages
- Track conversion statistics
- Handle edge cases gracefully

## Key ARTS Passes
Reference these existing passes in [lib/arts/Passes/](mdc:lib/arts/Passes/):
- `ConvertOpenMPToArts.cpp`: OpenMP to ARTS conversion
- `ConvertArtsToLLVM.cpp`: ARTS to LLVM conversion
- `CreateDbs.cpp`: DataBlock identification
- `Edt.cpp`: EDT optimization
# MLIR Pass Development for CARTS

## Pass Location and Structure
- Passes should be in [lib/arts/Passes/](mdc:lib/arts/Passes/)
- Pass declarations in [include/arts/Passes/](mdc:include/arts/Passes/)
- Use `Pass` suffix for pass classes
- Implement `runOnOperation()` method

## Pass Template
```cpp
namespace {
struct MyARTSPass : public arts::MyARTSPassBase<MyARTSPass> {
  void runOnOperation() override {
    ModuleOp module = getOperation();
    MLIRContext *context = &getContext();
    
    // Pass implementation
    RewritePatternSet patterns(context);
    patterns.add<MyPattern>(context);
    
    if (failed(applyPatternsAndFoldGreedily(module, std::move(patterns))))
      return signalPassFailure();
  }
};
} // end namespace
```

## TableGen Pass Registration
Define passes in [include/arts/Passes/ArtsPasses.td](mdc:include/arts/Passes/ArtsPasses.td):
```tablegen
def MyARTSPass : Pass<"my-arts-pass", "mlir::ModuleOp"> {
  let summary = "My ARTS pass description";
  let dependentDialects = [
    "arts::ArtsDialect",
    "memref::MemRefDialect",
    "LLVM::LLVMDialect"
  ];
  let constructor = "mlir::arts::createMyARTSPass()";
  let options = [
    Option<"debug", "debug", "bool", /*default=*/"false",
           "Enable debug mode.">
  ];
}
```

## Common ARTS Pass Types
- **Conversion Passes**: OpenMP → ARTS, ARTS → LLVM
- **Optimization Passes**: EDT optimization, invariant code motion
- **Analysis Passes**: DataBlock identification, dependency analysis
- **Transformation Passes**: Code restructuring, pointer rematerialization

## Debug Support
```cpp
#define DEBUG_TYPE "my-arts-pass"
#define LINE "-----------------------------------------\n"
#define dbgs() (llvm::dbgs())
#define DBGS() (dbgs() << "[" DEBUG_TYPE "] ")

// Usage
LLVM_DEBUG(DBGS() << "Processing operation\n");
LLVM_DEBUG({
  dbgs() << LINE << "Pass STARTED\n" << LINE;
  module.dump();
});
```

## Error Handling
- Use `signalPassFailure()` for pass failures
- Provide meaningful error messages
- Track conversion statistics
- Handle edge cases gracefully

## Key ARTS Passes
Reference these existing passes in [lib/arts/Passes/](mdc:lib/arts/Passes/):
- `ConvertOpenMPToArts.cpp`: OpenMP to ARTS conversion
- `ConvertArtsToLLVM.cpp`: ARTS to LLVM conversion
- `CreateDbs.cpp`: DataBlock identification
- `Edt.cpp`: EDT optimization
