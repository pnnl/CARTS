---
alwaysApply: true
---
# CARTS Project Overview

## Development Principles
- **Be concise with your changes** - Focus on essential functionality, avoid unnecessary complexity
- **Do not overengineer** - Choose simple, maintainable solutions over complex abstractions
- **Come up with the most optimal solution** - Prioritize performance and efficiency in all implementations

## What is CARTS?
CARTS is an LLVM/MLIR-based compiler framework that implements the ARTS (Asynchronous Runtime System) dialect for distributed programming with memory-disaggregated architectures.

**Key Components:**
- Custom MLIR dialect (ARTS) for task-based parallelism
- LLVM/MLIR integration with Polygeist
- OpenMP to ARTS transformation pipeline
- Memory-centric execution model

**Important**: While the ARTS runtime supports GPU execution, CARTS currently only supports CPU execution. GPU support is planned for future development.

## Core Architecture
The project transforms OpenMP-based parallel code through MLIR-based transformations into the ARTS dialect, optimizing for memory-disaggregated systems where memory is physically separated from compute.

## Build System
- **Primary interface**: `carts` wrapper script for all operations
- Main build command: `carts build` (or `make build`)
- Build system: CMake + Ninja
- Dependencies: LLVM 18, MLIR, Polygeist, ARTS runtime
- Install directory: `./.install/`

## Command Interface
All CARTS operations should use the `carts` wrapper script:
```bash
carts build          # Build project
carts cgeist         # C++ to MLIR
carts opt            # MLIR optimizations  
carts run            # ARTS transformations
carts compile        # Final compilation
carts setup          # Environment setup
```
