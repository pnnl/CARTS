---
description: ARTS Runtime Integration
alwaysApply: false
---
# ARTS Runtime Integration

## Runtime Location
The ARTS runtime is in [./external/arts/](mdc:external/arts/) and provides core functionality for EDT management, DataBlock management, and distributed execution.

## Key Runtime Functions
When working with code generation in [lib/arts/Passes/ConvertArtsToLLVM.cpp](mdc:lib/arts/Passes/ConvertArtsToLLVM.cpp), these runtime functions are called:

### Memory Management
```cpp
void *artsMalloc(size_t size);        // Basic allocation
void artsFree(void *ptr);             // Memory deallocation
void *artsCalloc(size_t size);        // Zero-initialized allocation
```

### EDT Functions
```cpp
artsGuid_t artsEdtCreate(artsEdt_t funcPtr, unsigned int route, 
                        uint32_t paramc, uint64_t *paramv, uint32_t depc);
void artsSignalEdt(artsGuid_t edtGuid, uint32_t slot, artsGuid_t dataGuid);
```

### DataBlock Functions
```cpp
void *artsDbCreateWithGuid(artsGuid_t guid, uint64_t size);
void artsDbDestroy(artsGuid_t guid);
void artsDbAddDependence(artsGuid_t dbGuid, artsGuid_t edtGuid, uint32_t slot);
```

### Runtime Info Functions
```cpp
unsigned int artsGetCurrentNode();
unsigned int artsGetTotalNodes();
unsigned int artsGetCurrentWorker();
unsigned int artsGetTotalWorkers();
void artsYield();
```

## Runtime Function Declarations
Runtime functions are declared in [include/arts/Codegen/ARTSKinds.def](mdc:include/arts/Codegen/ARTSKinds.def) using:
```cpp
__ARTS_RTL(artsMalloc, VoidPtr, SizeTy)
__ARTS_RTL(artsEdtCreate, ArtsGuid, EdtFnPtr, Int32, Int32, Int64Ptr, Int32)
```

## Code Generation Pattern
In passes, use `ArtsCodegen` to call runtime functions:
```cpp
// Create runtime call
auto allocCall = AC->createRuntimeCall(types::ARTSRTL_artsMalloc, {totalSize}, loc);
auto allocPtr = allocCall.getResult(0);

// Add replacement
AC->addReplacement(op.getResult(), allocPtr);
```

## Runtime Types
Key runtime types from [external/arts/core/inc/arts/runtime/RT.h](mdc:external/arts/core/inc/arts/runtime/RT.h):
```cpp
typedef intptr_t artsGuid_t;           // Global Unique Identifier
typedef void (*artsEdt_t)(uint32_t paramc, uint64_t *paramv, 
                         uint32_t depc, artsEdtDep_t depv[]);
typedef struct {
  artsGuid_t guid;
  artsType_t mode;
  void *ptr;
} artsEdtDep_t;
```

## Configuration
Runtime configuration is in `arts.cfg` files:
- `threads=16`: Number of worker threads
- `scheduler=3`: GPU scheduler (if GPU enabled)
- `counterFolder=./counters/`: Performance monitoring

- `scheduler=3`: GPU scheduler (if GPU enabled)
- `counterFolder=./counters/`: Performance monitoring
