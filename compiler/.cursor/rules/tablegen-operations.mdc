---
description:  TableGen Operation Definitions for ARTS Dialect
alwaysApply: false
---
# TableGen Operation Definitions for ARTS Dialect

## Operation Definition Guidelines
All ARTS dialect operations must be defined in [include/arts/ArtsOps.td](mdc:include/arts/ArtsOps.td).

## Operation Structure
```tablegen
def ArtsMyOp : Arts_Op<"my_op", [Traits]> {
  let summary = "Brief description of operation";
  let description = [{
    Detailed description of what this operation does.
    Include usage examples and semantic details.
  }];
  
  let arguments = (ins ArgumentType:$argName);
  let results = (outs ResultType:$resultName);
  
  let builders = [
    OpBuilder<(ins "Type":$argType), [{
      // Builder implementation
    }]>
  ];
  
  let hasCustomAssemblyFormat = 1; // If needed
  let extraClassDeclaration = [{
    // Additional methods
  }];
}
```

## Core ARTS Operations
- **EDT Operations**: `arts.edt` - Event-Driven Tasks with attributes (parallel/single/sync/task)
- **Epoch Operations**: `arts.epoch` - Epoch regions for task synchronization
- **DataBlock Operations**: `arts.db_alloc`, `arts.db_dep` - Memory management and dependencies
- **Synchronization**: `arts.barrier`, `arts.yield` - Control flow and synchronization
- **Runtime Info**: `arts.get_total_workers`, `arts.get_current_worker`, etc.

## Required Elements
- Use `Arts_Op` base class
- Follow naming pattern: `arts.operation_name`
- Include comprehensive `summary` and `description`
- Use proper traits: `MemoryEffects`, `Pure`, `Terminator`, etc.
- Add `extraClassDeclaration` for custom methods when needed

## Memory Effects
Accurately model memory effects:
- `MemoryEffects<[MemAlloc]>` for allocation operations
- `MemoryEffects<[MemWrite]>` for operations that modify state
- `Pure` for operations with no side effects

- `MemoryEffects<[MemWrite]>` for operations that modify state
- `Pure` for operations with no side effects
