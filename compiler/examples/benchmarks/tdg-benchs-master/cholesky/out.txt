cgeist: /home/randres/projects/carts/external/Polygeist/llvm-project/llvm/include/llvm/Support/Casting.h:566: decltype(auto) llvm::cast(const From &) [To = mlir::FunctionType, From = mlir::Type]: Assertion `isa<To>(Val) && "cast<Ty>() argument of incompatible type!"' failed.
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: cgeist cholesky.c -fopenmp -O0 -S -I /usr/lib/llvm-14/lib/clang/14.0.0/include --emit-llvm
 #0 0x0000556d84dbad87 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/home/randres/projects/carts/.install/polygeist/bin/cgeist+0x42c6d87)
 #1 0x0000556d84db895e llvm::sys::RunSignalHandlers() (/home/randres/projects/carts/.install/polygeist/bin/cgeist+0x42c495e)
 #2 0x0000556d84dbb59a SignalHandler(int) Signals.cpp:0:0
 #3 0x00007fde33eb2520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)
 #4 0x00007fde33f069fc pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fc)
 #5 0x00007fde33eb2476 gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42476)
 #6 0x00007fde33e987f3 abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f3)
 #7 0x00007fde33e9871b (/lib/x86_64-linux-gnu/libc.so.6+0x2871b)
 #8 0x00007fde33ea9e96 (/lib/x86_64-linux-gnu/libc.so.6+0x39e96)
 #9 0x0000556d885f4bda (/home/randres/projects/carts/.install/polygeist/bin/cgeist+0x7b00bda)
#10 0x0000556d850caf0c (anonymous namespace)::FuncOpLowering::matchAndRewrite(mlir::func::FuncOp, mlir::func::FuncOpAdaptor, mlir::ConversionPatternRewriter&) const ConvertPolygeistToLLVM.cpp:0:0
#11 0x0000556d850cada8 mlir::ConvertOpToLLVMPattern<mlir::func::FuncOp>::matchAndRewrite(mlir::Operation*, llvm::ArrayRef<mlir::Value>, mlir::ConversionPatternRewriter&) const ConvertPolygeistToLLVM.cpp:0:0
#12 0x0000556d8579982b mlir::ConversionPattern::matchAndRewrite(mlir::Operation*, mlir::PatternRewriter&) const (/home/randres/projects/carts/.install/polygeist/bin/cgeist+0x4ca582b)
#13 0x0000556d88944277 void llvm::function_ref<void ()>::callback_fn<mlir::PatternApplicator::matchAndRewrite(mlir::Operation*, mlir::PatternRewriter&, llvm::function_ref<bool (mlir::Pattern const&)>, llvm::function_ref<void (mlir::Pattern const&)>, llvm::function_ref<mlir::LogicalResult (mlir::Pattern const&)>)::$_2>(long) PatternApplicator.cpp:0:0
#14 0x0000556d88940b8f mlir::PatternApplicator::matchAndRewrite(mlir::Operation*, mlir::PatternRewriter&, llvm::function_ref<bool (mlir::Pattern const&)>, llvm::function_ref<void (mlir::Pattern const&)>, llvm::function_ref<mlir::LogicalResult (mlir::Pattern const&)>) (/home/randres/projects/carts/.install/polygeist/bin/cgeist+0x7e4cb8f)
#15 0x0000556d857a7ba5 (anonymous namespace)::OperationLegalizer::legalize(mlir::Operation*, mlir::ConversionPatternRewriter&) DialectConversion.cpp:0:0
#16 0x0000556d857a9b63 mlir::LogicalResult llvm::function_ref<mlir::LogicalResult (mlir::Pattern const&)>::callback_fn<(anonymous namespace)::OperationLegalizer::legalizeWithPattern(mlir::Operation*, mlir::ConversionPatternRewriter&)::$_20>(long, mlir::Pattern const&) DialectConversion.cpp:0:0
#17 0x0000556d88944038 void llvm::function_ref<void ()>::callback_fn<mlir::PatternApplicator::matchAndRewrite(mlir::Operation*, mlir::PatternRewriter&, llvm::function_ref<bool (mlir::Pattern const&)>, llvm::function_ref<void (mlir::Pattern const&)>, llvm::function_ref<mlir::LogicalResult (mlir::Pattern const&)>)::$_2>(long) PatternApplicator.cpp:0:0
#18 0x0000556d88940b8f mlir::PatternApplicator::matchAndRewrite(mlir::Operation*, mlir::PatternRewriter&, llvm::function_ref<bool (mlir::Pattern const&)>, llvm::function_ref<void (mlir::Pattern const&)>, llvm::function_ref<mlir::LogicalResult (mlir::Pattern const&)>) (/home/randres/projects/carts/.install/polygeist/bin/cgeist+0x7e4cb8f)
#19 0x0000556d857a7ba5 (anonymous namespace)::OperationLegalizer::legalize(mlir::Operation*, mlir::ConversionPatternRewriter&) DialectConversion.cpp:0:0
#20 0x0000556d8579cd47 (anonymous namespace)::OperationConverter::convertOperations(llvm::ArrayRef<mlir::Operation*>, llvm::function_ref<void (mlir::Diagnostic&)>) DialectConversion.cpp:0:0
#21 0x0000556d8579d600 mlir::applyPartialConversion(mlir::Operation*, mlir::ConversionTarget const&, mlir::FrozenRewritePatternSet const&, llvm::DenseSet<mlir::Operation*, llvm::DenseMapInfo<mlir::Operation*, void>>*) (/home/randres/projects/carts/.install/polygeist/bin/cgeist+0x4ca9600)
#22 0x0000556d850bc447 (anonymous namespace)::ConvertPolygeistToLLVMPass::convertModule(mlir::ModuleOp, bool) ConvertPolygeistToLLVM.cpp:0:0
#23 0x0000556d850b4dec (anonymous namespace)::ConvertPolygeistToLLVMPass::runOnOperation() ConvertPolygeistToLLVM.cpp:0:0
#24 0x0000556d85783734 mlir::detail::OpToOpPassAdaptor::run(mlir::Pass*, mlir::Operation*, mlir::AnalysisManager, bool, unsigned int) (/home/randres/projects/carts/.install/polygeist/bin/cgeist+0x4c8f734)
#25 0x0000556d85783d61 mlir::detail::OpToOpPassAdaptor::runPipeline(mlir::OpPassManager&, mlir::Operation*, mlir::AnalysisManager, bool, unsigned int, mlir::PassInstrumentor*, mlir::PassInstrumentation::PipelineParentInfo const*) (/home/randres/projects/carts/.install/polygeist/bin/cgeist+0x4c8fd61)
#26 0x0000556d85786262 mlir::PassManager::run(mlir::Operation*) (/home/randres/projects/carts/.install/polygeist/bin/cgeist+0x4c92262)
#27 0x0000556d83c3de08 main (/home/randres/projects/carts/.install/polygeist/bin/cgeist+0x3149e08)
#28 0x00007fde33e99d90 (/lib/x86_64-linux-gnu/libc.so.6+0x29d90)
#29 0x00007fde33e99e40 __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e40)
#30 0x0000556d83bf8ca5 _start (/home/randres/projects/carts/.install/polygeist/bin/cgeist+0x3104ca5)
