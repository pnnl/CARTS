//===--- ARTSKinds.def - ARTS directives, clauses, rt-calls -*- C++ -*-===//
/// This file defines the list of supported ARTS runtime
/// calls, and other things that need to be listed in enums.
///
/// This file is under transition to ARTS.td with TableGen code generation.
///
//===----------------------------------------------------------------------===//

/// ------------------- ARTS typedefs -------------------
#define ArtsGuid Int64
#define ArtsGuidPtr Int64Ptr
#define ArtsPtr Int64
#define ArtsType Int32
#define SizeTy PtrSize
#define Void builder.getNoneType()

/// -----------------Types used in RT structs or RT functions -----------------
///
///{
#ifndef ARTS_TYPE
#define ARTS_TYPE(VarName, InitValue)
#endif

/// Macro for integer types with a specific bit width
#define __ARTS_INTEGER_TYPE(VarName, BitWidth)                                 \
  ARTS_TYPE(VarName, mlir::IntegerType::get(context, BitWidth))

/// Macro for specific types (e.g., float, double)
#define __ARTS_TYPE(VarName, TypeCreator)                                      \
  ARTS_TYPE(VarName, TypeCreator(context))

/// Macro for pointer types
#define __ARTS_PTR_TYPE(VarName, ElemType)                                     \
  ARTS_TYPE(VarName, mlir::MemRefType::get({ShapedType::kDynamic}, ElemType))

/// Define basic LLVM types
__ARTS_TYPE(Float, mlir::Float32Type::get)
__ARTS_TYPE(Double, mlir::Float64Type::get)

/// Define integer types
__ARTS_INTEGER_TYPE(PtrSize, llvmDL.getPointerSize())
__ARTS_INTEGER_TYPE(Int1, 1)
__ARTS_INTEGER_TYPE(Int8, 8)
__ARTS_INTEGER_TYPE(Int16, 16)
__ARTS_INTEGER_TYPE(Int32, 32)
__ARTS_INTEGER_TYPE(Int64, 64)

/// Define pointer types
__ARTS_PTR_TYPE(VoidPtr, PtrSize)
__ARTS_PTR_TYPE(VoidPtrPtr, VoidPtr)
__ARTS_PTR_TYPE(Int8Ptr, Int8)
__ARTS_PTR_TYPE(Int16Ptr, Int16)
__ARTS_PTR_TYPE(Int32Ptr, Int32)
__ARTS_PTR_TYPE(Int64Ptr, Int64)
__ARTS_PTR_TYPE(Int8PtrPtr, Int8Ptr)

#undef __ARTS_INTEGER_TYPE
#undef __ARTS_TYPE
#undef __ARTS_PTR_TYPE
#undef ARTS_TYPE
///}

/// ---------------------------- Struct types ---------------------------- ///
///{
#ifndef ARTS_STRUCT_TYPE
#define ARTS_STRUCT_TYPE(VarName, StructName, Packed, ...)
#endif

#define __ARTS_STRUCT_TYPE(VarName, Name, Packed, ...)                         \
  ARTS_STRUCT_TYPE(VarName, "struct." #Name, Packed, __VA_ARGS__)

// typedef struct {
//   ArtsGuid guid;
//   ArtsType mode;
//   void *ptr;
// } artsEdtDep_t;
__ARTS_STRUCT_TYPE(ArtsEdtDep, artsEdtDep_t, false, ArtsGuid, ArtsType, llvmPtr)

#undef __ARTS_STRUCT_TYPE
#undef ARTS_STRUCT_TYPE

/// ---------------------------- Function types ---------------------------- ///
///{
#ifndef ARTS_FUNCTION_TYPE
#define ARTS_FUNCTION_TYPE(VarName, ReturnType, ...)
#endif

#define __ARTS_FUNCTION_TYPE(VarName, ReturnType, ...)                         \
  ARTS_FUNCTION_TYPE(VarName, ReturnType, __VA_ARGS__)

// typedef void (*artsEdt_t)(uint32_t paramc, uint64_t *paramv, uint32_t depc,
//                           artsEdtDep_t depv[]);
__ARTS_FUNCTION_TYPE(EdtFn, Void, Int32, Int64Ptr, Int32, ArtsEdtDepPtr)

// void mainEdt(int argc, char **argv)
__ARTS_FUNCTION_TYPE(ArtsMainFn, Void, Int32, Int8PtrPtr)

// void initPerNode(unsigned int nodeId, int argc, char **argv)
__ARTS_FUNCTION_TYPE(InitPerNodeFn, Void, Int32, Int32, Int8PtrPtr)

// void initPerWorker(unsigned int nodeId, unsigned int workerId, int argc,
//                    char** argv)
__ARTS_FUNCTION_TYPE(InitPerWorkerFn, Void, Int32, Int32, Int8PtrPtr)

/// int main(int argc, char** argv)
__ARTS_FUNCTION_TYPE(MainFn, Int32, Int32, Int8PtrPtr)
#undef __ARTS_FUNCTION_TYPE
#undef ARTS_FUNCTION_TYPE
///}

/// ------------------------------ Runtime ------------------------------ ///
///{
#ifndef ARTS_RTL
#define ARTS_RTL(Enum, Str, ReturnType, ...)
#endif

#define __ARTS_RTL(Name, ReturnType, ...)                                      \
  ARTS_RTL(ARTSRTL_##Name, #Name, ReturnType, __VA_ARGS__)

// int artsRT(int argc, char **argv);
__ARTS_RTL(artsRT, Int32, Int32, Int8PtrPtr)
// void artsShutdown();
__ARTS_RTL(artsShutdown, Void)
// void *artsMalloc(size_t size);
__ARTS_RTL(artsMalloc, VoidPtr, SizeTy)
// void artsFree(void *ptr);
__ARTS_RTL(artsFree, Void, VoidPtr)
// ArtsGuid artsReserveGuidRoute(ArtsType type, unsigned int route);
__ARTS_RTL(artsReserveGuidRoute, ArtsGuid, ArtsType, Int32)
/// }

/// ------------------------------ EDTs ------------------------------ ///
/// {
// ArtsGuid artsEdtCreate(artsEdt_t funcPtr, unsigned int route,
//                        uint32_t paramc, uint64_t *paramv, uint32_t depc);
__ARTS_RTL(artsEdtCreate, ArtsGuid, EdtFnPtr, Int32, Int32, Int64Ptr, Int32)
// ArtsGuid artsEdtCreateWithGuid(artsEdt_t funcPtr, ArtsGuid guid, uint32_t
//                                paramc, uint64_t * paramv, uint32_t depc);
__ARTS_RTL(artsEdtCreateWithGuid, ArtsGuid, EdtFnPtr, ArtsGuid, Int32, Int64Ptr,
           Int32)
// ArtsGuid artsEdtCreateWithEpoch(artsEdt_t funcPtr, unsigned int route,
//                                 uint32_t paramc, uint64_t *paramv,
//                                 uint32_t depc, ArtsGuid epochGuid);
__ARTS_RTL(artsEdtCreateWithEpoch, ArtsGuid, EdtFnPtr, Int32, Int32, Int64Ptr,
           Int32, ArtsGuid)
// void artsSignalEdt(ArtsGuid edtGuid, uint32_t slot, ArtsGuid dataGuid);
__ARTS_RTL(artsSignalEdt, Void, ArtsGuid, Int32, ArtsGuid)
// void artsSignalEdtValue(ArtsGuid edtGuid, uint32_t slot, uint64_t data);
__ARTS_RTL(artsSignalEdtValue, Void, ArtsGuid, Int32, Int64)
// void artsSignalEdtPtr(ArtsGuid edtGuid, uint32_t slot, void *ptr, unsigned
//                       int size);
__ARTS_RTL(artsSignalEdtPtr, Void, ArtsGuid, Int32, VoidPtr, Int32)
/// }

/// ------------------------- Persistent Events -------------------------- ///
/// {
// artsGuid_t artsPersistentEventCreate(
//    unsigned int route, unsigned int latchCount, artsGuid_t dataGuid);
__ARTS_RTL(artsPersistentEventCreate, ArtsGuid, Int32, Int32, ArtsGuid)

// void artsPersistentEventSatisfy(artsGuid_t eventGuid, artsGuid_t dataGuid,
//                                 uint32_t action);
__ARTS_RTL(artsPersistentEventSatisfy, Void, ArtsGuid, ArtsGuid, Int32)

// void artsPersistentEventIncrementLatch(artsGuid_t eventGuid,
//                                        artsGuid_t dataGuid);
__ARTS_RTL(artsPersistentEventIncrementLatch, Void, ArtsGuid, ArtsGuid)

// void artsPersistentEventDecrementLatch(artsGuid_t eventGuid,
//                                        artsGuid_t dataGuid);
__ARTS_RTL(artsPersistentEventDecrementLatch, Void, ArtsGuid, ArtsGuid)

// void artsAddDependenceToPersistentEvent(
//    artsGuid_t eventSource, artsGuid_t edtDest, uint32_t edtSlot,
//    artsGuid dataGuid);
__ARTS_RTL(artsAddDependenceToPersistentEvent, Void, ArtsGuid, ArtsGuid, Int32,
           ArtsGuid)
/// }

/// ------------------------------ DataBlock ------------------------------ ///
/// {
// void *artsDbCreateWithGuid(artsGuid_t guid, uint64_t size);
__ARTS_RTL(artsDbCreateWithGuid, VoidPtr, ArtsGuid, Int64)

// void *artsDbCreateWithGuidAndData(artsGuid_t guid, void *data,
//                                   uint64_t size);
__ARTS_RTL(artsDbCreateWithGuidAndData, VoidPtr, ArtsGuid, VoidPtr, Int64)

// void artsDbIncrementLatch(artsGuid_t guid);
__ARTS_RTL(artsDbIncrementLatch, Void, ArtsGuid)

// void artsDbDecrementLatch(artsGuid_t guid);
__ARTS_RTL(artsDbDecrementLatch, Void, ArtsGuid)

// void artsDbAddDependence(artsGuid_t dbSrc, artsGuid_t edtDest,
//                         uint32_t edtSlot);
__ARTS_RTL(artsDbAddDependence, Void, ArtsGuid, ArtsGuid, Int32)

/// }

/// ------------------------------ Epoch ------------------------------ ///
/// {
// ArtsGuid artsGetCurrentEpochGuid();
__ARTS_RTL(artsGetCurrentEpochGuid, ArtsGuid)
// ArtsGuid artsInitializeAndStartEpoch(ArtsGuid finishEdtGuid,
//                                      unsigned int slot);
__ARTS_RTL(artsInitializeAndStartEpoch, ArtsGuid, ArtsGuid, Int32)
// bool artsWaitOnHandle(ArtsGuid epochGuid);
__ARTS_RTL(artsWaitOnHandle, Int1, ArtsGuid)
// void artsYield();
__ARTS_RTL(artsYield, Void)
/// }

/// ------------------------------ Utils ------------------------------ ///
/// {
// ArtsGuid artsGetCurrentGuid();
__ARTS_RTL(artsGetCurrentGuid, ArtsGuid)
// unsigned int artsGetCurrentNode();
__ARTS_RTL(artsGetCurrentNode, Int32)
// unsigned int artsGetTotalNodes();
__ARTS_RTL(artsGetTotalNodes, Int32)
// unsigned int artsGetCurrentWorker();
__ARTS_RTL(artsGetCurrentWorker, Int32)
// unsigned int artsGetTotalWorkers();
__ARTS_RTL(artsGetTotalWorkers, Int32)
/// }

#undef __ARTS_RTL
#undef ARTS_RTL