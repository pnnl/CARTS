cgeist matrix.c -fopenmp -O0 -S -I//usr/lib/llvm-14/lib/clang/14.0.0/include > matrix.mlir
carts matrix.mlir -O3 -emit-llvm -o matrix.ll
error: 'memref.load' op incorrect number of indices for load
Error when running ARTS Passes"builtin.module"() ({
  "func.func"() <{function_type = (i32, memref<?xmemref<?xi8>>) -> i32, sym_name = "artsRT", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = () -> (), sym_name = "artsShutdown", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (i64, i64) -> (), sym_name = "artsPersistentEventIncrementLatch", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (i64, i64) -> (), sym_name = "artsPersistentEventDecrementLatch", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = () -> i64, sym_name = "artsGetCurrentEpochGuid", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (i64, i64, i32, i64) -> (), sym_name = "artsAddDependenceToPersistentEvent", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>, i32, i32, memref<?xi64>, i32, i64) -> i64, sym_name = "artsEdtCreateWithEpoch", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (i32, i32, i64) -> i64, sym_name = "artsPersistentEventCreate", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (i64) -> i1, sym_name = "artsWaitOnHandle", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (i64, i32) -> i64, sym_name = "artsInitializeAndStartEpoch", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>, i32, i32, memref<?xi64>, i32) -> i64, sym_name = "artsEdtCreate", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (i64, i64) -> memref<?xi8>, sym_name = "artsDbCreateWithGuid", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (i32, i32) -> i64, sym_name = "artsReserveGuidRoute", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = () -> i32, sym_name = "artsGetCurrentNode", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>, llvm.nounwind, llvm.readnone} : () -> ()
  "llvm.mlir.global"() <{addr_space = 0 : i32, constant, global_type = !llvm.array<39 x i8>, linkage = #llvm.linkage<internal>, sym_name = "str6", unnamed_addr = 0 : i64, value = "Verification encountered %d error(s).\0A\00", visibility_ = 0 : i64}> ({
  }) : () -> ()
  "llvm.mlir.global"() <{addr_space = 0 : i32, constant, global_type = !llvm.array<53 x i8>, linkage = #llvm.linkage<internal>, sym_name = "str5", unnamed_addr = 0 : i64, value = "Verification succeeded: All B elements are correct.\0A\00", visibility_ = 0 : i64}> ({
  }) : () -> ()
  "llvm.mlir.global"() <{addr_space = 0 : i32, constant, global_type = !llvm.array<56 x i8>, linkage = #llvm.linkage<internal>, sym_name = "str4", unnamed_addr = 0 : i64, value = "Verification failed at B[%d][%d]: got %f, expected %f.\0A\00", visibility_ = 0 : i64}> ({
  }) : () -> ()
  "llvm.mlir.global"() <{addr_space = 0 : i32, constant, global_type = !llvm.array<12 x i8>, linkage = #llvm.linkage<internal>, sym_name = "str3", unnamed_addr = 0 : i64, value = "\0AMatrix B:\0A\00", visibility_ = 0 : i64}> ({
  }) : () -> ()
  "llvm.mlir.global"() <{addr_space = 0 : i32, constant, global_type = !llvm.array<2 x i8>, linkage = #llvm.linkage<internal>, sym_name = "str2", unnamed_addr = 0 : i64, value = "\0A\00", visibility_ = 0 : i64}> ({
  }) : () -> ()
  "llvm.mlir.global"() <{addr_space = 0 : i32, constant, global_type = !llvm.array<7 x i8>, linkage = #llvm.linkage<internal>, sym_name = "str1", unnamed_addr = 0 : i64, value = "%6.2f \00", visibility_ = 0 : i64}> ({
  }) : () -> ()
  "llvm.mlir.global"() <{addr_space = 0 : i32, constant, global_type = !llvm.array<11 x i8>, linkage = #llvm.linkage<internal>, sym_name = "str0", unnamed_addr = 0 : i64, value = "Matrix A:\0A\00", visibility_ = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 (ptr, ...)>, linkage = #llvm.linkage<external>, sym_name = "printf", unnamed_addr = 0 : i64, visibility_ = 0 : i64}> ({
  }) : () -> ()
  "func.func"() <{function_type = () -> i32, sym_name = "mainBody"}> ({
    %0 = "arith.constant"() <{value = 8 : index}> : () -> index
    %1 = "arith.constant"() <{value = 0 : index}> : () -> index
    %2 = "arith.constant"() <{value = 10 : index}> : () -> index
    %3 = "arith.constant"() <{value = 1 : index}> : () -> index
    %4 = "arith.constant"() <{value = -1 : i32}> : () -> i32
    %5 = "arith.constant"() <{value = 0 : i32}> : () -> i32
    %6 = "arith.constant"() <{value = 1 : i32}> : () -> i32
    %7 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
    %8 = "memref.alloca"(%2, %2) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?xi64>
    %9 = "arith.constant"() <{value = 0 : index}> : () -> index
    %10 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%9, %2, %10) ({
    ^bb0(%arg0: index):
      %91 = "arith.constant"() <{value = 0 : index}> : () -> index
      %92 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%91, %2, %92) ({
      ^bb0(%arg1: index):
        %93 = "arith.constant"() <{value = 0 : i32}> : () -> i32
        %94 = "arith.constant"() <{value = 0 : i64}> : () -> i64
        %95 = "func.call"(%7, %93, %94) <{callee = @artsPersistentEventCreate}> : (i32, i32, i64) -> i64
        "memref.store"(%95, %8, %arg0, %arg1) <{nontemporal = false}> : (i64, memref<?x?xi64>, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %11 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
    %12 = "arith.index_cast"(%0) : (index) -> i64
    %13 = "arith.constant"() <{value = 10 : i32}> : () -> i32
    %14 = "memref.alloca"(%2, %2) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?xi64>
    %15 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<10x10xmemref<?xi8>>
    %16 = "arith.constant"() <{value = 0 : index}> : () -> index
    %17 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%16, %2, %17) ({
    ^bb0(%arg0: index):
      %91 = "arith.constant"() <{value = 0 : index}> : () -> index
      %92 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%91, %2, %92) ({
      ^bb0(%arg1: index):
        %93 = "func.call"(%13, %11) <{callee = @artsReserveGuidRoute}> : (i32, i32) -> i64
        %94 = "func.call"(%93, %12) <{callee = @artsDbCreateWithGuid}> : (i64, i64) -> memref<?xi8>
        "memref.store"(%93, %14, %arg0, %arg1) <{nontemporal = false}> : (i64, memref<?x?xi64>, index, index) -> ()
        "memref.store"(%94, %15, %arg0, %arg1) <{nontemporal = false}> : (memref<?xi8>, memref<10x10xmemref<?xi8>>, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %18 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
    %19 = "memref.alloca"(%2, %2) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?xi64>
    %20 = "arith.constant"() <{value = 0 : index}> : () -> index
    %21 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%20, %2, %21) ({
    ^bb0(%arg0: index):
      %91 = "arith.constant"() <{value = 0 : index}> : () -> index
      %92 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%91, %2, %92) ({
      ^bb0(%arg1: index):
        %93 = "arith.constant"() <{value = 0 : i32}> : () -> i32
        %94 = "arith.constant"() <{value = 0 : i64}> : () -> i64
        %95 = "func.call"(%18, %93, %94) <{callee = @artsPersistentEventCreate}> : (i32, i32, i64) -> i64
        "memref.store"(%95, %19, %arg0, %arg1) <{nontemporal = false}> : (i64, memref<?x?xi64>, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %22 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
    %23 = "arith.index_cast"(%0) : (index) -> i64
    %24 = "arith.constant"() <{value = 10 : i32}> : () -> i32
    %25 = "memref.alloca"(%2, %2) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?xi64>
    %26 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<10x10xmemref<?xi8>>
    %27 = "arith.constant"() <{value = 0 : index}> : () -> index
    %28 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%27, %2, %28) ({
    ^bb0(%arg0: index):
      %91 = "arith.constant"() <{value = 0 : index}> : () -> index
      %92 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%91, %2, %92) ({
      ^bb0(%arg1: index):
        %93 = "func.call"(%24, %22) <{callee = @artsReserveGuidRoute}> : (i32, i32) -> i64
        %94 = "func.call"(%93, %23) <{callee = @artsDbCreateWithGuid}> : (i64, i64) -> memref<?xi8>
        "memref.store"(%93, %25, %arg0, %arg1) <{nontemporal = false}> : (i64, memref<?x?xi64>, index, index) -> ()
        "memref.store"(%94, %26, %arg0, %arg1) <{nontemporal = false}> : (memref<?xi8>, memref<10x10xmemref<?xi8>>, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %29 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
    %30 = "arith.constant"() <{value = 0 : index}> : () -> index
    %31 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%30, %31) : (index, memref<index>) -> ()
    %32 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%30, %32) : (index, memref<index>) -> ()
    %33 = "memref.load"(%32) : (memref<index>) -> index
    %34 = "arith.index_cast"(%33) : (index) -> i32
    %35 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    %36 = "arith.constant"() <{value = 0 : index}> : () -> index
    "memref.store"(%36, %35) : (index, memref<index>) -> ()
    %37 = "memref.load"(%35) : (memref<index>) -> index
    %38 = "arith.index_cast"(%37) : (index) -> i32
    %39 = "memref.alloca"(%37) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
    %40 = "arith.constant"() <{value = 1 : i32}> : () -> i32
    %41 = "polygeist.get_func"() <{name = @__arts_edt_1}> : () -> !llvm.ptr<!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>
    %42 = "polygeist.pointer2memref"(%41) : (!llvm.ptr<!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>) -> memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>
    %43 = "func.call"(%42, %29, %38, %39, %40) <{callee = @artsEdtCreate}> : (memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>, i32, i32, memref<?xi64>, i32) -> i64
    %44 = "arith.constant"() <{value = 0 : i32}> : () -> i32
    %45 = "func.call"(%43, %44) <{callee = @artsInitializeAndStartEpoch}> : (i64, i32) -> i64
    %46 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
    %47 = "arith.constant"() <{value = 0 : index}> : () -> index
    %48 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%47, %48) : (index, memref<index>) -> ()
    %49 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%47, %49) : (index, memref<index>) -> ()
    %50 = "memref.load"(%49) : (memref<index>) -> index
    %51 = "arith.constant"() <{value = 1 : index}> : () -> index
    %52 = "arith.muli"(%51, %2) : (index, index) -> index
    %53 = "arith.muli"(%52, %2) : (index, index) -> index
    %54 = "memref.load"(%49) : (memref<index>) -> index
    %55 = "arith.addi"(%54, %53) : (index, index) -> index
    "memref.store"(%55, %49) : (index, memref<index>) -> ()
    %56 = "memref.load"(%49) : (memref<index>) -> index
    %57 = "arith.constant"() <{value = 1 : index}> : () -> index
    %58 = "arith.muli"(%57, %2) : (index, index) -> index
    %59 = "arith.muli"(%58, %2) : (index, index) -> index
    %60 = "memref.load"(%49) : (memref<index>) -> index
    %61 = "arith.addi"(%60, %59) : (index, index) -> index
    "memref.store"(%61, %49) : (index, memref<index>) -> ()
    %62 = "memref.load"(%49) : (memref<index>) -> index
    %63 = "arith.index_cast"(%62) : (index) -> i32
    %64 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    %65 = "arith.constant"() <{value = 0 : index}> : () -> index
    "memref.store"(%65, %64) : (index, memref<index>) -> ()
    %66 = "memref.load"(%64) : (memref<index>) -> index
    %67 = "arith.index_cast"(%66) : (index) -> i32
    %68 = "memref.alloca"(%66) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
    %69 = "polygeist.get_func"() <{name = @__arts_edt_2}> : () -> !llvm.ptr<!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>
    %70 = "polygeist.pointer2memref"(%69) : (!llvm.ptr<!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>) -> memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>
    %71 = "func.call"(%70, %46, %67, %68, %63, %45) <{callee = @artsEdtCreateWithEpoch}> : (memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>, i32, i32, memref<?xi64>, i32, i64) -> i64
    %72 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%50, %72) : (index, memref<index>) -> ()
    %73 = "arith.addi"(%1, %2) : (index, index) -> index
    %74 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%1, %73, %74) ({
    ^bb0(%arg0: index):
      %91 = "arith.addi"(%1, %2) : (index, index) -> index
      %92 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%1, %91, %92) ({
      ^bb0(%arg1: index):
        %93 = "memref.load"(%8, %arg0, %arg1) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        %94 = "memref.load"(%72) : (memref<index>) -> index
        %95 = "memref.load"(%14, %arg0, %arg1) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        %96 = "arith.index_cast"(%94) : (index) -> i32
        "func.call"(%93, %71, %96, %95) <{callee = @artsAddDependenceToPersistentEvent}> : (i64, i64, i32, i64) -> ()
        %97 = "arith.constant"() <{value = 1 : index}> : () -> index
        %98 = "arith.addi"(%94, %97) : (index, index) -> index
        "memref.store"(%98, %72) : (index, memref<index>) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %75 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%56, %75) : (index, memref<index>) -> ()
    %76 = "arith.addi"(%1, %2) : (index, index) -> index
    %77 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%1, %76, %77) ({
    ^bb0(%arg0: index):
      %91 = "arith.addi"(%1, %2) : (index, index) -> index
      %92 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%1, %91, %92) ({
      ^bb0(%arg1: index):
        %93 = "memref.load"(%19, %arg0, %arg1) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        %94 = "memref.load"(%75) : (memref<index>) -> index
        %95 = "memref.load"(%25, %arg0, %arg1) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        %96 = "arith.index_cast"(%94) : (index) -> i32
        "func.call"(%93, %71, %96, %95) <{callee = @artsAddDependenceToPersistentEvent}> : (i64, i64, i32, i64) -> ()
        %97 = "arith.constant"() <{value = 1 : index}> : () -> index
        %98 = "arith.addi"(%94, %97) : (index, index) -> index
        "memref.store"(%98, %75) : (index, memref<index>) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %78 = "func.call"(%45) <{callee = @artsWaitOnHandle}> : (i64) -> i1
    %79 = "llvm.mlir.addressof"() <{global_name = @str0}> : () -> !llvm.ptr
    %80 = "llvm.getelementptr"(%79) <{elem_type = !llvm.array<11 x i8>, rawConstantIndices = array<i32: 0, 0>}> : (!llvm.ptr) -> !llvm.ptr
    %81 = "llvm.call"(%80) <{callee = @printf, callee_type = !llvm.func<i32 (ptr, ...)>, fastmathFlags = #llvm.fastmath<none>}> : (!llvm.ptr) -> i32
    %82 = "llvm.mlir.addressof"() <{global_name = @str1}> : () -> !llvm.ptr
    %83 = "llvm.getelementptr"(%82) <{elem_type = !llvm.array<7 x i8>, rawConstantIndices = array<i32: 0, 0>}> : (!llvm.ptr) -> !llvm.ptr
    %84 = "llvm.mlir.addressof"() <{global_name = @str2}> : () -> !llvm.ptr
    %85 = "llvm.getelementptr"(%84) <{elem_type = !llvm.array<2 x i8>, rawConstantIndices = array<i32: 0, 0>}> : (!llvm.ptr) -> !llvm.ptr
    "scf.for"(%1, %2, %3) ({
    ^bb0(%arg0: index):
      "scf.for"(%1, %2, %3) ({
      ^bb0(%arg1: index):
        %92 = "polygeist.subindex"(%26, %arg0) : (memref<10x10xmemref<?xi8>>, index) -> memref<10xmemref<?xi8>>
        %93 = "polygeist.subindex"(%92, %arg1) : (memref<10xmemref<?xi8>>, index) -> memref<memref<?xi8>>
        %94 = "polygeist.memref2pointer"(%93) : (memref<memref<?xi8>>) -> !llvm.ptr
        %95 = "llvm.load"(%94) <{ordering = 0 : i64}> : (!llvm.ptr) -> !llvm.ptr
        %96 = "llvm.load"(%95) <{ordering = 0 : i64}> : (!llvm.ptr) -> f64
        %97 = "llvm.call"(%83, %96) <{callee = @printf, callee_type = !llvm.func<i32 (ptr, ...)>, fastmathFlags = #llvm.fastmath<none>}> : (!llvm.ptr, f64) -> i32
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      %91 = "llvm.call"(%85) <{callee = @printf, callee_type = !llvm.func<i32 (ptr, ...)>, fastmathFlags = #llvm.fastmath<none>}> : (!llvm.ptr) -> i32
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %86 = "llvm.mlir.addressof"() <{global_name = @str3}> : () -> !llvm.ptr
    %87 = "llvm.getelementptr"(%86) <{elem_type = !llvm.array<12 x i8>, rawConstantIndices = array<i32: 0, 0>}> : (!llvm.ptr) -> !llvm.ptr
    %88 = "llvm.call"(%87) <{callee = @printf, callee_type = !llvm.func<i32 (ptr, ...)>, fastmathFlags = #llvm.fastmath<none>}> : (!llvm.ptr) -> i32
    "scf.for"(%1, %2, %3) ({
    ^bb0(%arg0: index):
      "scf.for"(%1, %2, %3) ({
      ^bb0(%arg1: index):
        %92 = "polygeist.subindex"(%15, %arg0) : (memref<10x10xmemref<?xi8>>, index) -> memref<10xmemref<?xi8>>
        %93 = "polygeist.subindex"(%92, %arg1) : (memref<10xmemref<?xi8>>, index) -> memref<memref<?xi8>>
        %94 = "polygeist.memref2pointer"(%93) : (memref<memref<?xi8>>) -> !llvm.ptr
        %95 = "llvm.load"(%94) <{ordering = 0 : i64}> : (!llvm.ptr) -> !llvm.ptr
        %96 = "llvm.load"(%95) <{ordering = 0 : i64}> : (!llvm.ptr) -> f64
        %97 = "llvm.call"(%83, %96) <{callee = @printf, callee_type = !llvm.func<i32 (ptr, ...)>, fastmathFlags = #llvm.fastmath<none>}> : (!llvm.ptr, f64) -> i32
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      %91 = "llvm.call"(%85) <{callee = @printf, callee_type = !llvm.func<i32 (ptr, ...)>, fastmathFlags = #llvm.fastmath<none>}> : (!llvm.ptr) -> i32
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %89 = "scf.for"(%1, %2, %3, %5) ({
    ^bb0(%arg0: index, %arg1: i32):
      %91 = "arith.index_cast"(%arg0) : (index) -> i32
      %92 = "arith.cmpi"(%91, %5) <{predicate = 0 : i64}> : (i32, i32) -> i1
      %93 = "scf.for"(%1, %2, %3, %arg1) ({
      ^bb0(%arg2: index, %arg3: i32):
        %94 = "arith.index_cast"(%arg2) : (index) -> i32
        %95 = "scf.if"(%92) ({
          %103 = "arith.addi"(%91, %94) : (i32, i32) -> i32
          %104 = "arith.sitofp"(%103) : (i32) -> f64
          "scf.yield"(%104) : (f64) -> ()
        }, {
          %103 = "arith.addi"(%91, %94) : (i32, i32) -> i32
          %104 = "arith.addi"(%91, %4) : (i32, i32) -> i32
          %105 = "arith.addi"(%104, %94) : (i32, i32) -> i32
          %106 = "arith.addi"(%103, %105) : (i32, i32) -> i32
          %107 = "arith.sitofp"(%106) : (i32) -> f64
          "scf.yield"(%107) : (f64) -> ()
        }) : (i1) -> f64
        %96 = "polygeist.subindex"(%15, %arg0) : (memref<10x10xmemref<?xi8>>, index) -> memref<10xmemref<?xi8>>
        %97 = "polygeist.subindex"(%96, %arg2) : (memref<10xmemref<?xi8>>, index) -> memref<memref<?xi8>>
        %98 = "polygeist.memref2pointer"(%97) : (memref<memref<?xi8>>) -> !llvm.ptr
        %99 = "llvm.load"(%98) <{ordering = 0 : i64}> : (!llvm.ptr) -> !llvm.ptr
        %100 = "llvm.load"(%99) <{ordering = 0 : i64}> : (!llvm.ptr) -> f64
        %101 = "arith.cmpf"(%100, %95) <{predicate = 13 : i64}> : (f64, f64) -> i1
        %102 = "scf.if"(%101) ({
          %103 = "llvm.mlir.addressof"() <{global_name = @str4}> : () -> !llvm.ptr
          %104 = "llvm.getelementptr"(%103) <{elem_type = !llvm.array<56 x i8>, rawConstantIndices = array<i32: 0, 0>}> : (!llvm.ptr) -> !llvm.ptr
          %105 = "llvm.call"(%104, %91, %94, %100, %95) <{callee = @printf, callee_type = !llvm.func<i32 (ptr, ...)>, fastmathFlags = #llvm.fastmath<none>}> : (!llvm.ptr, i32, i32, f64, f64) -> i32
          %106 = "arith.addi"(%arg3, %6) : (i32, i32) -> i32
          "scf.yield"(%106) : (i32) -> ()
        }, {
          "scf.yield"(%arg3) : (i32) -> ()
        }) : (i1) -> i32
        "scf.yield"(%102) : (i32) -> ()
      }) : (index, index, index, i32) -> i32
      "scf.yield"(%93) : (i32) -> ()
    }) : (index, index, index, i32) -> i32
    %90 = "arith.cmpi"(%89, %5) <{predicate = 0 : i64}> : (i32, i32) -> i1
    "scf.if"(%90) ({
      %91 = "llvm.mlir.addressof"() <{global_name = @str5}> : () -> !llvm.ptr
      %92 = "llvm.getelementptr"(%91) <{elem_type = !llvm.array<53 x i8>, rawConstantIndices = array<i32: 0, 0>}> : (!llvm.ptr) -> !llvm.ptr
      %93 = "llvm.call"(%92) <{callee = @printf, callee_type = !llvm.func<i32 (ptr, ...)>, fastmathFlags = #llvm.fastmath<none>}> : (!llvm.ptr) -> i32
      "scf.yield"() : () -> ()
    }, {
      %91 = "llvm.mlir.addressof"() <{global_name = @str6}> : () -> !llvm.ptr
      %92 = "llvm.getelementptr"(%91) <{elem_type = !llvm.array<39 x i8>, rawConstantIndices = array<i32: 0, 0>}> : (!llvm.ptr) -> !llvm.ptr
      %93 = "llvm.call"(%92, %89) <{callee = @printf, callee_type = !llvm.func<i32 (ptr, ...)>, fastmathFlags = #llvm.fastmath<none>}> : (!llvm.ptr, i32) -> i32
      "scf.yield"() : () -> ()
    }) : (i1) -> ()
    "func.return"(%5) : (i32) -> ()
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>) -> (), sym_name = "__arts_edt_1", sym_visibility = "private"}> ({
  ^bb0(%arg0: i32, %arg1: memref<?xi64>, %arg2: i32, %arg3: memref<?x!llvm.struct<(i64, i32, ptr)>>):
    "func.return"() : () -> ()
  }) : () -> ()
  "func.func"() <{function_type = (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>) -> (), sym_name = "__arts_edt_2", sym_visibility = "private"}> ({
  ^bb0(%arg0: i32, %arg1: memref<?xi64>, %arg2: i32, %arg3: memref<?x!llvm.struct<(i64, i32, ptr)>>):
    %0 = "arith.constant"() <{value = 10 : index}> : () -> index
    %1 = "arith.constant"() <{value = 8 : index}> : () -> index
    %2 = "arith.constant"() <{value = 0 : index}> : () -> index
    %3 = "arith.constant"() <{value = 1 : index}> : () -> index
    %4 = "arith.constant"() <{value = -1 : i32}> : () -> i32
    %5 = "arith.constant"() <{value = 0 : index}> : () -> index
    %6 = "arith.constant"() <{value = 1 : index}> : () -> index
    %7 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%5, %7) : (index, memref<index>) -> ()
    %8 = "polygeist.typeSize"() <{source = !llvm.struct<(i64, i32, ptr)>}> : () -> index
    %9 = "polygeist.memref2pointer"(%arg3) : (memref<?x!llvm.struct<(i64, i32, ptr)>>) -> !llvm.ptr
    %10 = "arith.constant"() <{value = 10 : index}> : () -> index
    %11 = "arith.constant"() <{value = 0 : index}> : () -> index
    %12 = "arith.constant"() <{value = 10 : index}> : () -> index
    %13 = "arith.constant"() <{value = 0 : index}> : () -> index
    %14 = "memref.alloca"(%10, %12) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?xi64>
    %15 = "memref.alloca"(%10, %12) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?xmemref<?xi8>>
    %16 = "arith.constant"() <{value = 0 : index}> : () -> index
    "scf.for"(%16, %10, %6) ({
    ^bb0(%arg4: index):
      %76 = "arith.constant"() <{value = 0 : index}> : () -> index
      "scf.for"(%76, %12, %6) ({
      ^bb0(%arg5: index):
        %77 = "memref.load"(%7) : (memref<index>) -> index
        %78 = "arith.muli"(%77, %8) : (index, index) -> index
        %79 = "arith.index_cast"(%78) : (index) -> i32
        %80 = "llvm.getelementptr"(%9, %79) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
        %81 = "arith.constant"() <{value = 0 : i32}> : () -> i32
        %82 = "llvm.getelementptr"(%80, %81) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 0>}> : (!llvm.ptr, i32) -> !llvm.ptr
        %83 = "llvm.load"(%82) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
        %84 = "arith.constant"() <{value = 0 : i32}> : () -> i32
        %85 = "arith.constant"() <{value = 2 : i32}> : () -> i32
        %86 = "llvm.getelementptr"(%80, %84) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 2>}> : (!llvm.ptr, i32) -> !llvm.ptr
        %87 = "llvm.load"(%86) <{ordering = 0 : i64}> : (!llvm.ptr) -> memref<?xi8>
        "memref.store"(%83, %14, %arg4, %arg5) <{nontemporal = false}> : (i64, memref<?x?xi64>, index, index) -> ()
        "memref.store"(%87, %15, %arg4, %arg5) <{nontemporal = false}> : (memref<?xi8>, memref<?x?xmemref<?xi8>>, index, index) -> ()
        %88 = "arith.addi"(%77, %6) : (index, index) -> index
        "memref.store"(%88, %7) : (index, memref<index>) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %17 = "arith.constant"() <{value = 10 : index}> : () -> index
    %18 = "arith.constant"() <{value = 0 : index}> : () -> index
    %19 = "arith.constant"() <{value = 10 : index}> : () -> index
    %20 = "arith.constant"() <{value = 0 : index}> : () -> index
    %21 = "memref.alloca"(%17, %19) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?xi64>
    %22 = "memref.alloca"(%17, %19) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?xmemref<?xi8>>
    %23 = "arith.constant"() <{value = 0 : index}> : () -> index
    "scf.for"(%23, %17, %6) ({
    ^bb0(%arg4: index):
      %76 = "arith.constant"() <{value = 0 : index}> : () -> index
      "scf.for"(%76, %19, %6) ({
      ^bb0(%arg5: index):
        %77 = "memref.load"(%7) : (memref<index>) -> index
        %78 = "arith.muli"(%77, %8) : (index, index) -> index
        %79 = "arith.index_cast"(%78) : (index) -> i32
        %80 = "llvm.getelementptr"(%9, %79) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
        %81 = "arith.constant"() <{value = 0 : i32}> : () -> i32
        %82 = "llvm.getelementptr"(%80, %81) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 0>}> : (!llvm.ptr, i32) -> !llvm.ptr
        %83 = "llvm.load"(%82) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
        %84 = "arith.constant"() <{value = 0 : i32}> : () -> i32
        %85 = "arith.constant"() <{value = 2 : i32}> : () -> i32
        %86 = "llvm.getelementptr"(%80, %84) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 2>}> : (!llvm.ptr, i32) -> !llvm.ptr
        %87 = "llvm.load"(%86) <{ordering = 0 : i64}> : (!llvm.ptr) -> memref<?xi8>
        "memref.store"(%83, %21, %arg4, %arg5) <{nontemporal = false}> : (i64, memref<?x?xi64>, index, index) -> ()
        "memref.store"(%87, %22, %arg4, %arg5) <{nontemporal = false}> : (memref<?xi8>, memref<?x?xmemref<?xi8>>, index, index) -> ()
        %88 = "arith.addi"(%77, %6) : (index, index) -> index
        "memref.store"(%88, %7) : (index, memref<index>) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %24 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
    %25 = "memref.alloca"(%0, %0) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?xi64>
    %26 = "arith.constant"() <{value = 0 : index}> : () -> index
    %27 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%26, %0, %27) ({
    ^bb0(%arg4: index):
      %76 = "arith.constant"() <{value = 0 : index}> : () -> index
      %77 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%76, %0, %77) ({
      ^bb0(%arg5: index):
        %78 = "arith.constant"() <{value = 0 : i32}> : () -> i32
        %79 = "arith.constant"() <{value = 0 : i64}> : () -> i64
        %80 = "func.call"(%24, %78, %79) <{callee = @artsPersistentEventCreate}> : (i32, i32, i64) -> i64
        "memref.store"(%80, %25, %arg4, %arg5) <{nontemporal = false}> : (i64, memref<?x?xi64>, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %28 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
    %29 = "memref.alloca"(%0, %0) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?xi64>
    %30 = "arith.constant"() <{value = 0 : index}> : () -> index
    %31 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%30, %0, %31) ({
    ^bb0(%arg4: index):
      %76 = "arith.constant"() <{value = 0 : index}> : () -> index
      %77 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%76, %0, %77) ({
      ^bb0(%arg5: index):
        %78 = "arith.constant"() <{value = 0 : i32}> : () -> i32
        %79 = "arith.constant"() <{value = 0 : i64}> : () -> i64
        %80 = "func.call"(%28, %78, %79) <{callee = @artsPersistentEventCreate}> : (i32, i32, i64) -> i64
        "memref.store"(%80, %29, %arg4, %arg5) <{nontemporal = false}> : (i64, memref<?x?xi64>, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    "scf.for"(%2, %0, %3) ({
    ^bb0(%arg4: index):
      %76 = "arith.index_cast"(%arg4) : (index) -> i32
      %77 = "func.call"() <{callee = @artsGetCurrentEpochGuid}> : () -> i64
      %78 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
      %79 = "arith.constant"() <{value = 0 : index}> : () -> index
      %80 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      "memref.store"(%79, %80) : (index, memref<index>) -> ()
      %81 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      "memref.store"(%79, %81) : (index, memref<index>) -> ()
      %82 = "memref.load"(%81) : (memref<index>) -> index
      %83 = "arith.constant"() <{value = 1 : index}> : () -> index
      %84 = "arith.muli"(%83, %0) : (index, index) -> index
      %85 = "memref.load"(%81) : (memref<index>) -> index
      %86 = "arith.addi"(%85, %84) : (index, index) -> index
      "memref.store"(%86, %81) : (index, memref<index>) -> ()
      %87 = "memref.load"(%80) : (memref<index>) -> index
      %88 = "arith.addi"(%87, %84) : (index, index) -> index
      "memref.store"(%88, %80) : (index, memref<index>) -> ()
      %89 = "memref.load"(%81) : (memref<index>) -> index
      %90 = "arith.index_cast"(%89) : (index) -> i32
      %91 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      %92 = "arith.constant"() <{value = 1 : index}> : () -> index
      "memref.store"(%92, %91) : (index, memref<index>) -> ()
      %93 = "memref.load"(%91) : (memref<index>) -> index
      %94 = "memref.load"(%80) : (memref<index>) -> index
      %95 = "arith.addi"(%93, %94) : (index, index) -> index
      "memref.store"(%95, %91) : (index, memref<index>) -> ()
      %96 = "memref.load"(%91) : (memref<index>) -> index
      %97 = "arith.index_cast"(%96) : (index) -> i32
      %98 = "memref.alloca"(%96) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
      %99 = "arith.constant"() <{value = 0 : index}> : () -> index
      %100 = "arith.extsi"(%76) : (i32) -> i64
      "memref.store"(%100, %98, %99) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
      %101 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      %102 = "arith.constant"() <{value = 1 : index}> : () -> index
      "memref.store"(%102, %101) : (index, memref<index>) -> ()
      %103 = "arith.addi"(%2, %0) : (index, index) -> index
      %104 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%2, %103, %104) ({
      ^bb0(%arg5: index):
        %115 = "memref.load"(%29, %arg4, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        %116 = "memref.load"(%101) : (memref<index>) -> index
        "memref.store"(%115, %98, %116) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
        %117 = "arith.constant"() <{value = 1 : index}> : () -> index
        %118 = "arith.addi"(%116, %117) : (index, index) -> index
        "memref.store"(%118, %101) : (index, memref<index>) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      %105 = "polygeist.get_func"() <{name = @__arts_edt_3}> : () -> !llvm.ptr<!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>
      %106 = "polygeist.pointer2memref"(%105) : (!llvm.ptr<!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>) -> memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>
      %107 = "func.call"(%106, %78, %97, %98, %90, %77) <{callee = @artsEdtCreateWithEpoch}> : (memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>, i32, i32, memref<?xi64>, i32, i64) -> i64
      %108 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      "memref.store"(%82, %108) : (index, memref<index>) -> ()
      %109 = "arith.addi"(%2, %0) : (index, index) -> index
      %110 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%2, %109, %110) ({
      ^bb0(%arg5: index):
        %115 = "memref.load"(%29, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index) -> i64
        %116 = "memref.load"(%108) : (memref<index>) -> index
        %117 = "memref.load"(%21, %arg4, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        %118 = "arith.index_cast"(%116) : (index) -> i32
        "func.call"(%115, %107, %118, %117) <{callee = @artsAddDependenceToPersistentEvent}> : (i64, i64, i32, i64) -> ()
        %119 = "arith.constant"() <{value = 1 : index}> : () -> index
        %120 = "arith.addi"(%116, %119) : (index, index) -> index
        "memref.store"(%120, %108) : (index, memref<index>) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      %111 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      "memref.store"(%82, %111) : (index, memref<index>) -> ()
      %112 = "arith.addi"(%2, %0) : (index, index) -> index
      %113 = "arith.constant"() <{value = 1 : index}> : () -> index
      %114 = "scf.for"(%2, %112, %113, %111) ({
      ^bb0(%arg5: index, %arg6: memref<index>):
        %115 = "memref.load"(%29, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index) -> i64
        %116 = "memref.load"(%21, %arg4, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        "func.call"(%115, %116) <{callee = @artsPersistentEventIncrementLatch}> : (i64, i64) -> ()
        %117 = "memref.load"(%arg6) : (memref<index>) -> index
        %118 = "arith.constant"() <{value = 1 : index}> : () -> index
        %119 = "arith.addi"(%117, %118) : (index, index) -> index
        "memref.store"(%119, %arg6) : (index, memref<index>) -> ()
        "scf.yield"(%arg6) : (memref<index>) -> ()
      }) : (index, index, index, memref<index>) -> memref<index>
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %32 = "func.call"() <{callee = @artsGetCurrentEpochGuid}> : () -> i64
    %33 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
    %34 = "arith.constant"() <{value = 0 : index}> : () -> index
    %35 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%34, %35) : (index, memref<index>) -> ()
    %36 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%34, %36) : (index, memref<index>) -> ()
    %37 = "memref.load"(%36) : (memref<index>) -> index
    %38 = "arith.constant"() <{value = 1 : index}> : () -> index
    %39 = "arith.muli"(%38, %0) : (index, index) -> index
    %40 = "memref.load"(%36) : (memref<index>) -> index
    %41 = "arith.addi"(%40, %39) : (index, index) -> index
    "memref.store"(%41, %36) : (index, memref<index>) -> ()
    %42 = "memref.load"(%35) : (memref<index>) -> index
    %43 = "arith.addi"(%42, %39) : (index, index) -> index
    "memref.store"(%43, %35) : (index, memref<index>) -> ()
    %44 = "memref.load"(%36) : (memref<index>) -> index
    %45 = "arith.constant"() <{value = 1 : index}> : () -> index
    %46 = "arith.muli"(%45, %0) : (index, index) -> index
    %47 = "memref.load"(%36) : (memref<index>) -> index
    %48 = "arith.addi"(%47, %46) : (index, index) -> index
    "memref.store"(%48, %36) : (index, memref<index>) -> ()
    %49 = "memref.load"(%36) : (memref<index>) -> index
    %50 = "arith.index_cast"(%49) : (index) -> i32
    %51 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    %52 = "arith.constant"() <{value = 0 : index}> : () -> index
    "memref.store"(%52, %51) : (index, memref<index>) -> ()
    %53 = "memref.load"(%51) : (memref<index>) -> index
    %54 = "memref.load"(%35) : (memref<index>) -> index
    %55 = "arith.addi"(%53, %54) : (index, index) -> index
    "memref.store"(%55, %51) : (index, memref<index>) -> ()
    %56 = "memref.load"(%51) : (memref<index>) -> index
    %57 = "arith.index_cast"(%56) : (index) -> i32
    %58 = "memref.alloca"(%56) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
    %59 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    %60 = "arith.constant"() <{value = 0 : index}> : () -> index
    "memref.store"(%60, %59) : (index, memref<index>) -> ()
    %61 = "arith.addi"(%2, %0) : (index, index) -> index
    %62 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%2, %61, %62) ({
    ^bb0(%arg4: index):
      %76 = "memref.load"(%25, %2, %arg4) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
      %77 = "memref.load"(%59) : (memref<index>) -> index
      "memref.store"(%76, %58, %77) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
      %78 = "arith.constant"() <{value = 1 : index}> : () -> index
      %79 = "arith.addi"(%77, %78) : (index, index) -> index
      "memref.store"(%79, %59) : (index, memref<index>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %63 = "polygeist.get_func"() <{name = @__arts_edt_4}> : () -> !llvm.ptr<!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>
    %64 = "polygeist.pointer2memref"(%63) : (!llvm.ptr<!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>) -> memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>
    %65 = "func.call"(%64, %33, %57, %58, %50, %32) <{callee = @artsEdtCreateWithEpoch}> : (memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>, i32, i32, memref<?xi64>, i32, i64) -> i64
    %66 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%37, %66) : (index, memref<index>) -> ()
    %67 = "arith.addi"(%2, %0) : (index, index) -> index
    %68 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%2, %67, %68) ({
    ^bb0(%arg4: index):
      %76 = "memref.load"(%25, %arg4) <{nontemporal = false}> : (memref<?x?xi64>, index) -> i64
      %77 = "memref.load"(%66) : (memref<index>) -> index
      %78 = "memref.load"(%14, %2, %arg4) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
      %79 = "arith.index_cast"(%77) : (index) -> i32
      "func.call"(%76, %65, %79, %78) <{callee = @artsAddDependenceToPersistentEvent}> : (i64, i64, i32, i64) -> ()
      %80 = "arith.constant"() <{value = 1 : index}> : () -> index
      %81 = "arith.addi"(%77, %80) : (index, index) -> index
      "memref.store"(%81, %66) : (index, memref<index>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %69 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%44, %69) : (index, memref<index>) -> ()
    %70 = "arith.addi"(%2, %0) : (index, index) -> index
    %71 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%2, %70, %71) ({
    ^bb0(%arg4: index):
      %76 = "memref.load"(%29, %arg4) <{nontemporal = false}> : (memref<?x?xi64>, index) -> i64
      %77 = "memref.load"(%69) : (memref<index>) -> index
      %78 = "memref.load"(%21, %2, %arg4) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
      %79 = "arith.index_cast"(%77) : (index) -> i32
      "func.call"(%76, %65, %79, %78) <{callee = @artsAddDependenceToPersistentEvent}> : (i64, i64, i32, i64) -> ()
      %80 = "arith.constant"() <{value = 1 : index}> : () -> index
      %81 = "arith.addi"(%77, %80) : (index, index) -> index
      "memref.store"(%81, %69) : (index, memref<index>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %72 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%37, %72) : (index, memref<index>) -> ()
    %73 = "arith.addi"(%2, %0) : (index, index) -> index
    %74 = "arith.constant"() <{value = 1 : index}> : () -> index
    %75 = "scf.for"(%2, %73, %74, %72) ({
    ^bb0(%arg4: index, %arg5: memref<index>):
      %76 = "memref.load"(%25, %arg4) <{nontemporal = false}> : (memref<?x?xi64>, index) -> i64
      %77 = "memref.load"(%14, %2, %arg4) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
      "func.call"(%76, %77) <{callee = @artsPersistentEventIncrementLatch}> : (i64, i64) -> ()
      %78 = "memref.load"(%arg5) : (memref<index>) -> index
      %79 = "arith.constant"() <{value = 1 : index}> : () -> index
      %80 = "arith.addi"(%78, %79) : (index, index) -> index
      "memref.store"(%80, %arg5) : (index, memref<index>) -> ()
      "scf.yield"(%arg5) : (memref<index>) -> ()
    }) : (index, index, index, memref<index>) -> memref<index>
    "scf.for"(%3, %0, %3) ({
    ^bb0(%arg4: index):
      %76 = "arith.index_cast"(%arg4) : (index) -> i32
      %77 = "arith.addi"(%76, %4) : (i32, i32) -> i32
      %78 = "arith.index_cast"(%77) : (i32) -> index
      %79 = "func.call"() <{callee = @artsGetCurrentEpochGuid}> : () -> i64
      %80 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
      %81 = "arith.constant"() <{value = 0 : index}> : () -> index
      %82 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      "memref.store"(%81, %82) : (index, memref<index>) -> ()
      %83 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      "memref.store"(%81, %83) : (index, memref<index>) -> ()
      %84 = "memref.load"(%83) : (memref<index>) -> index
      %85 = "arith.constant"() <{value = 1 : index}> : () -> index
      %86 = "arith.muli"(%85, %0) : (index, index) -> index
      %87 = "memref.load"(%83) : (memref<index>) -> index
      %88 = "arith.addi"(%87, %86) : (index, index) -> index
      "memref.store"(%88, %83) : (index, memref<index>) -> ()
      %89 = "memref.load"(%83) : (memref<index>) -> index
      %90 = "arith.constant"() <{value = 1 : index}> : () -> index
      %91 = "arith.muli"(%90, %0) : (index, index) -> index
      %92 = "memref.load"(%83) : (memref<index>) -> index
      %93 = "arith.addi"(%92, %91) : (index, index) -> index
      "memref.store"(%93, %83) : (index, memref<index>) -> ()
      %94 = "memref.load"(%83) : (memref<index>) -> index
      %95 = "arith.constant"() <{value = 1 : index}> : () -> index
      %96 = "arith.muli"(%95, %0) : (index, index) -> index
      %97 = "memref.load"(%83) : (memref<index>) -> index
      %98 = "arith.addi"(%97, %96) : (index, index) -> index
      "memref.store"(%98, %83) : (index, memref<index>) -> ()
      %99 = "memref.load"(%82) : (memref<index>) -> index
      %100 = "arith.addi"(%99, %96) : (index, index) -> index
      "memref.store"(%100, %82) : (index, memref<index>) -> ()
      %101 = "memref.load"(%83) : (memref<index>) -> index
      %102 = "arith.index_cast"(%101) : (index) -> i32
      %103 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      %104 = "arith.constant"() <{value = 0 : index}> : () -> index
      "memref.store"(%104, %103) : (index, memref<index>) -> ()
      %105 = "memref.load"(%103) : (memref<index>) -> index
      %106 = "memref.load"(%82) : (memref<index>) -> index
      %107 = "arith.addi"(%105, %106) : (index, index) -> index
      "memref.store"(%107, %103) : (index, memref<index>) -> ()
      %108 = "memref.load"(%103) : (memref<index>) -> index
      %109 = "arith.index_cast"(%108) : (index) -> i32
      %110 = "memref.alloca"(%108) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
      %111 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      %112 = "arith.constant"() <{value = 0 : index}> : () -> index
      "memref.store"(%112, %111) : (index, memref<index>) -> ()
      %113 = "arith.addi"(%2, %0) : (index, index) -> index
      %114 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%2, %113, %114) ({
      ^bb0(%arg5: index):
        %131 = "memref.load"(%25, %arg4, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        %132 = "memref.load"(%111) : (memref<index>) -> index
        "memref.store"(%131, %110, %132) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
        %133 = "arith.constant"() <{value = 1 : index}> : () -> index
        %134 = "arith.addi"(%132, %133) : (index, index) -> index
        "memref.store"(%134, %111) : (index, memref<index>) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      %115 = "polygeist.get_func"() <{name = @__arts_edt_5}> : () -> !llvm.ptr<!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>
      %116 = "polygeist.pointer2memref"(%115) : (!llvm.ptr<!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>) -> memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>
      %117 = "func.call"(%116, %80, %109, %110, %102, %79) <{callee = @artsEdtCreateWithEpoch}> : (memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>, i32, i32, memref<?xi64>, i32, i64) -> i64
      %118 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      "memref.store"(%84, %118) : (index, memref<index>) -> ()
      %119 = "arith.addi"(%2, %0) : (index, index) -> index
      %120 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%2, %119, %120) ({
      ^bb0(%arg5: index):
        %131 = "memref.load"(%29, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index) -> i64
        %132 = "memref.load"(%118) : (memref<index>) -> index
        %133 = "memref.load"(%21, %78, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        %134 = "arith.index_cast"(%132) : (index) -> i32
        "func.call"(%131, %117, %134, %133) <{callee = @artsAddDependenceToPersistentEvent}> : (i64, i64, i32, i64) -> ()
        %135 = "arith.constant"() <{value = 1 : index}> : () -> index
        %136 = "arith.addi"(%132, %135) : (index, index) -> index
        "memref.store"(%136, %118) : (index, memref<index>) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      %121 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      "memref.store"(%89, %121) : (index, memref<index>) -> ()
      %122 = "arith.addi"(%2, %0) : (index, index) -> index
      %123 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%2, %122, %123) ({
      ^bb0(%arg5: index):
        %131 = "memref.load"(%29, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index) -> i64
        %132 = "memref.load"(%121) : (memref<index>) -> index
        %133 = "memref.load"(%21, %arg4, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        %134 = "arith.index_cast"(%132) : (index) -> i32
        "func.call"(%131, %117, %134, %133) <{callee = @artsAddDependenceToPersistentEvent}> : (i64, i64, i32, i64) -> ()
        %135 = "arith.constant"() <{value = 1 : index}> : () -> index
        %136 = "arith.addi"(%132, %135) : (index, index) -> index
        "memref.store"(%136, %121) : (index, memref<index>) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      %124 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      "memref.store"(%94, %124) : (index, memref<index>) -> ()
      %125 = "arith.addi"(%2, %0) : (index, index) -> index
      %126 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%2, %125, %126) ({
      ^bb0(%arg5: index):
        %131 = "memref.load"(%25, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index) -> i64
        %132 = "memref.load"(%124) : (memref<index>) -> index
        %133 = "memref.load"(%14, %arg4, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        %134 = "arith.index_cast"(%132) : (index) -> i32
        "func.call"(%131, %117, %134, %133) <{callee = @artsAddDependenceToPersistentEvent}> : (i64, i64, i32, i64) -> ()
        %135 = "arith.constant"() <{value = 1 : index}> : () -> index
        %136 = "arith.addi"(%132, %135) : (index, index) -> index
        "memref.store"(%136, %124) : (index, memref<index>) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      %127 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      "memref.store"(%94, %127) : (index, memref<index>) -> ()
      %128 = "arith.addi"(%2, %0) : (index, index) -> index
      %129 = "arith.constant"() <{value = 1 : index}> : () -> index
      %130 = "scf.for"(%2, %128, %129, %127) ({
      ^bb0(%arg5: index, %arg6: memref<index>):
        %131 = "memref.load"(%25, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index) -> i64
        %132 = "memref.load"(%14, %arg4, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        "func.call"(%131, %132) <{callee = @artsPersistentEventIncrementLatch}> : (i64, i64) -> ()
        %133 = "memref.load"(%arg6) : (memref<index>) -> index
        %134 = "arith.constant"() <{value = 1 : index}> : () -> index
        %135 = "arith.addi"(%133, %134) : (index, index) -> index
        "memref.store"(%135, %arg6) : (index, memref<index>) -> ()
        "scf.yield"(%arg6) : (memref<index>) -> ()
      }) : (index, index, index, memref<index>) -> memref<index>
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
  "func.func"() <{function_type = (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>) -> (), sym_name = "__arts_edt_3", sym_visibility = "private"}> ({
  ^bb0(%arg0: i32, %arg1: memref<?xi64>, %arg2: i32, %arg3: memref<?x!llvm.struct<(i64, i32, ptr)>>):
    %0 = "arith.constant"() <{value = 0 : index}> : () -> index
    %1 = "arith.constant"() <{value = 10 : index}> : () -> index
    %2 = "arith.constant"() <{value = 1 : index}> : () -> index
    %3 = "arith.constant"() <{value = 0 : index}> : () -> index
    %4 = "memref.load"(%arg1, %3) <{nontemporal = false}> : (memref<?xi64>, index) -> i64
    %5 = "arith.trunci"(%4) : (i64) -> i32
    %6 = "arith.constant"() <{value = 0 : index}> : () -> index
    %7 = "arith.constant"() <{value = 1 : index}> : () -> index
    %8 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%6, %8) : (index, memref<index>) -> ()
    %9 = "polygeist.typeSize"() <{source = !llvm.struct<(i64, i32, ptr)>}> : () -> index
    %10 = "polygeist.memref2pointer"(%arg3) : (memref<?x!llvm.struct<(i64, i32, ptr)>>) -> !llvm.ptr
    %11 = "arith.constant"() <{value = 10 : index}> : () -> index
    %12 = "arith.constant"() <{value = 0 : index}> : () -> index
    %13 = "memref.alloca"(%11) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
    %14 = "memref.alloca"(%11) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xmemref<?xi8>>
    %15 = "arith.constant"() <{value = 0 : index}> : () -> index
    "scf.for"(%15, %11, %7) ({
    ^bb0(%arg4: index):
      %22 = "memref.load"(%8) : (memref<index>) -> index
      %23 = "arith.muli"(%22, %9) : (index, index) -> index
      %24 = "arith.index_cast"(%23) : (index) -> i32
      %25 = "llvm.getelementptr"(%10, %24) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %26 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %27 = "llvm.getelementptr"(%25, %26) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 0>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %28 = "llvm.load"(%27) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
      %29 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %30 = "arith.constant"() <{value = 2 : i32}> : () -> i32
      %31 = "llvm.getelementptr"(%25, %29) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 2>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %32 = "llvm.load"(%31) <{ordering = 0 : i64}> : (!llvm.ptr) -> memref<?xi8>
      "memref.store"(%28, %13, %arg4) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
      "memref.store"(%32, %14, %arg4) <{nontemporal = false}> : (memref<?xi8>, memref<?xmemref<?xi8>>, index) -> ()
      %33 = "arith.addi"(%22, %7) : (index, index) -> index
      "memref.store"(%33, %8) : (index, memref<index>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    "scf.for"(%0, %1, %2) ({
    ^bb0(%arg4: index):
      %22 = "arith.index_cast"(%arg4) : (index) -> i32
      %23 = "arith.addi"(%5, %22) : (i32, i32) -> i32
      %24 = "arith.sitofp"(%23) : (i32) -> f64
      %25 = "polygeist.subindex"(%14, %arg4) : (memref<?xmemref<?xi8>>, index) -> memref<memref<?xi8>>
      %26 = "polygeist.memref2pointer"(%25) : (memref<memref<?xi8>>) -> !llvm.ptr
      %27 = "llvm.load"(%26) <{ordering = 0 : i64}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%24, %27) <{ordering = 0 : i64}> : (f64, !llvm.ptr) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %16 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    %17 = "arith.constant"() <{value = 1 : index}> : () -> index
    "memref.store"(%17, %16) : (index, memref<index>) -> ()
    %18 = "polygeist.memref2pointer"(%arg1) : (memref<?xi64>) -> !llvm.ptr
    %19 = "arith.constant"() <{value = 0 : index}> : () -> index
    %20 = "arith.constant"() <{value = 1 : index}> : () -> index
    %21 = "scf.for"(%19, %11, %20, %16) ({
    ^bb0(%arg4: index, %arg5: memref<index>):
      %22 = "memref.load"(%arg5) : (memref<index>) -> index
      %23 = "arith.index_cast"(%22) : (index) -> i32
      %24 = "llvm.getelementptr"(%18, %23) <{elem_type = i64, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %25 = "llvm.load"(%24) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
      %26 = "polygeist.subindex"(%13, %arg4) : (memref<?xi64>, index) -> memref<i64>
      %27 = "memref.load"(%26) : (memref<i64>) -> i64
      "func.call"(%25, %27) <{callee = @artsPersistentEventDecrementLatch}> : (i64, i64) -> ()
      %28 = "arith.constant"() <{value = 1 : index}> : () -> index
      %29 = "arith.addi"(%22, %28) : (index, index) -> index
      "memref.store"(%29, %arg5) : (index, memref<index>) -> ()
      "scf.yield"(%arg5) : (memref<index>) -> ()
    }) : (index, index, index, memref<index>) -> memref<index>
    "func.return"() : () -> ()
  }) : () -> ()
  "func.func"() <{function_type = (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>) -> (), sym_name = "__arts_edt_4", sym_visibility = "private"}> ({
  ^bb0(%arg0: i32, %arg1: memref<?xi64>, %arg2: i32, %arg3: memref<?x!llvm.struct<(i64, i32, ptr)>>):
    %0 = "arith.constant"() <{value = 0 : index}> : () -> index
    %1 = "arith.constant"() <{value = 10 : index}> : () -> index
    %2 = "arith.constant"() <{value = 1 : index}> : () -> index
    %3 = "arith.constant"() <{value = 0 : index}> : () -> index
    %4 = "arith.constant"() <{value = 1 : index}> : () -> index
    %5 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%3, %5) : (index, memref<index>) -> ()
    %6 = "polygeist.typeSize"() <{source = !llvm.struct<(i64, i32, ptr)>}> : () -> index
    %7 = "polygeist.memref2pointer"(%arg3) : (memref<?x!llvm.struct<(i64, i32, ptr)>>) -> !llvm.ptr
    %8 = "arith.constant"() <{value = 10 : index}> : () -> index
    %9 = "arith.constant"() <{value = 0 : index}> : () -> index
    %10 = "memref.alloca"(%8) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
    %11 = "memref.alloca"(%8) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xmemref<?xi8>>
    %12 = "arith.constant"() <{value = 0 : index}> : () -> index
    "scf.for"(%12, %8, %4) ({
    ^bb0(%arg4: index):
      %24 = "memref.load"(%5) : (memref<index>) -> index
      %25 = "arith.muli"(%24, %6) : (index, index) -> index
      %26 = "arith.index_cast"(%25) : (index) -> i32
      %27 = "llvm.getelementptr"(%7, %26) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %28 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %29 = "llvm.getelementptr"(%27, %28) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 0>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %30 = "llvm.load"(%29) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
      %31 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %32 = "arith.constant"() <{value = 2 : i32}> : () -> i32
      %33 = "llvm.getelementptr"(%27, %31) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 2>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %34 = "llvm.load"(%33) <{ordering = 0 : i64}> : (!llvm.ptr) -> memref<?xi8>
      "memref.store"(%30, %10, %arg4) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
      "memref.store"(%34, %11, %arg4) <{nontemporal = false}> : (memref<?xi8>, memref<?xmemref<?xi8>>, index) -> ()
      %35 = "arith.addi"(%24, %4) : (index, index) -> index
      "memref.store"(%35, %5) : (index, memref<index>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %13 = "arith.constant"() <{value = 10 : index}> : () -> index
    %14 = "arith.constant"() <{value = 0 : index}> : () -> index
    %15 = "memref.alloca"(%13) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
    %16 = "memref.alloca"(%13) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xmemref<?xi8>>
    %17 = "arith.constant"() <{value = 0 : index}> : () -> index
    "scf.for"(%17, %13, %4) ({
    ^bb0(%arg4: index):
      %24 = "memref.load"(%5) : (memref<index>) -> index
      %25 = "arith.muli"(%24, %6) : (index, index) -> index
      %26 = "arith.index_cast"(%25) : (index) -> i32
      %27 = "llvm.getelementptr"(%7, %26) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %28 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %29 = "llvm.getelementptr"(%27, %28) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 0>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %30 = "llvm.load"(%29) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
      %31 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %32 = "arith.constant"() <{value = 2 : i32}> : () -> i32
      %33 = "llvm.getelementptr"(%27, %31) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 2>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %34 = "llvm.load"(%33) <{ordering = 0 : i64}> : (!llvm.ptr) -> memref<?xi8>
      "memref.store"(%30, %15, %arg4) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
      "memref.store"(%34, %16, %arg4) <{nontemporal = false}> : (memref<?xi8>, memref<?xmemref<?xi8>>, index) -> ()
      %35 = "arith.addi"(%24, %4) : (index, index) -> index
      "memref.store"(%35, %5) : (index, memref<index>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    "scf.for"(%0, %1, %2) ({
    ^bb0(%arg4: index):
      %24 = "polygeist.subindex"(%16, %arg4) : (memref<?xmemref<?xi8>>, index) -> memref<memref<?xi8>>
      %25 = "polygeist.memref2pointer"(%24) : (memref<memref<?xi8>>) -> !llvm.ptr
      %26 = "llvm.load"(%25) <{ordering = 0 : i64}> : (!llvm.ptr) -> !llvm.ptr
      %27 = "llvm.load"(%26) <{ordering = 0 : i64}> : (!llvm.ptr) -> f64
      %28 = "polygeist.subindex"(%11, %arg4) : (memref<?xmemref<?xi8>>, index) -> memref<memref<?xi8>>
      %29 = "polygeist.memref2pointer"(%28) : (memref<memref<?xi8>>) -> !llvm.ptr
      %30 = "llvm.load"(%29) <{ordering = 0 : i64}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%27, %30) <{ordering = 0 : i64}> : (f64, !llvm.ptr) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %18 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    %19 = "arith.constant"() <{value = 0 : index}> : () -> index
    "memref.store"(%19, %18) : (index, memref<index>) -> ()
    %20 = "polygeist.memref2pointer"(%arg1) : (memref<?xi64>) -> !llvm.ptr
    %21 = "arith.constant"() <{value = 0 : index}> : () -> index
    %22 = "arith.constant"() <{value = 1 : index}> : () -> index
    %23 = "scf.for"(%21, %8, %22, %18) ({
    ^bb0(%arg4: index, %arg5: memref<index>):
      %24 = "memref.load"(%arg5) : (memref<index>) -> index
      %25 = "arith.index_cast"(%24) : (index) -> i32
      %26 = "llvm.getelementptr"(%20, %25) <{elem_type = i64, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %27 = "llvm.load"(%26) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
      %28 = "polygeist.subindex"(%10, %arg4) : (memref<?xi64>, index) -> memref<i64>
      %29 = "memref.load"(%28) : (memref<i64>) -> i64
      "func.call"(%27, %29) <{callee = @artsPersistentEventDecrementLatch}> : (i64, i64) -> ()
      %30 = "arith.constant"() <{value = 1 : index}> : () -> index
      %31 = "arith.addi"(%24, %30) : (index, index) -> index
      "memref.store"(%31, %arg5) : (index, memref<index>) -> ()
      "scf.yield"(%arg5) : (memref<index>) -> ()
    }) : (index, index, index, memref<index>) -> memref<index>
    "func.return"() : () -> ()
  }) : () -> ()
  "func.func"() <{function_type = (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>) -> (), sym_name = "__arts_edt_5", sym_visibility = "private"}> ({
  ^bb0(%arg0: i32, %arg1: memref<?xi64>, %arg2: i32, %arg3: memref<?x!llvm.struct<(i64, i32, ptr)>>):
    %0 = "arith.constant"() <{value = 0 : index}> : () -> index
    %1 = "arith.constant"() <{value = 10 : index}> : () -> index
    %2 = "arith.constant"() <{value = 1 : index}> : () -> index
    %3 = "arith.constant"() <{value = 0 : index}> : () -> index
    %4 = "arith.constant"() <{value = 1 : index}> : () -> index
    %5 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%3, %5) : (index, memref<index>) -> ()
    %6 = "polygeist.typeSize"() <{source = !llvm.struct<(i64, i32, ptr)>}> : () -> index
    %7 = "polygeist.memref2pointer"(%arg3) : (memref<?x!llvm.struct<(i64, i32, ptr)>>) -> !llvm.ptr
    %8 = "arith.constant"() <{value = 10 : index}> : () -> index
    %9 = "arith.constant"() <{value = 0 : index}> : () -> index
    %10 = "memref.alloca"(%8) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
    %11 = "memref.alloca"(%8) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xmemref<?xi8>>
    %12 = "arith.constant"() <{value = 0 : index}> : () -> index
    "scf.for"(%12, %8, %4) ({
    ^bb0(%arg4: index):
      %29 = "memref.load"(%5) : (memref<index>) -> index
      %30 = "arith.muli"(%29, %6) : (index, index) -> index
      %31 = "arith.index_cast"(%30) : (index) -> i32
      %32 = "llvm.getelementptr"(%7, %31) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %33 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %34 = "llvm.getelementptr"(%32, %33) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 0>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %35 = "llvm.load"(%34) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
      %36 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %37 = "arith.constant"() <{value = 2 : i32}> : () -> i32
      %38 = "llvm.getelementptr"(%32, %36) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 2>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %39 = "llvm.load"(%38) <{ordering = 0 : i64}> : (!llvm.ptr) -> memref<?xi8>
      "memref.store"(%35, %10, %arg4) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
      "memref.store"(%39, %11, %arg4) <{nontemporal = false}> : (memref<?xi8>, memref<?xmemref<?xi8>>, index) -> ()
      %40 = "arith.addi"(%29, %4) : (index, index) -> index
      "memref.store"(%40, %5) : (index, memref<index>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %13 = "arith.constant"() <{value = 10 : index}> : () -> index
    %14 = "arith.constant"() <{value = 0 : index}> : () -> index
    %15 = "memref.alloca"(%13) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
    %16 = "memref.alloca"(%13) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xmemref<?xi8>>
    %17 = "arith.constant"() <{value = 0 : index}> : () -> index
    "scf.for"(%17, %13, %4) ({
    ^bb0(%arg4: index):
      %29 = "memref.load"(%5) : (memref<index>) -> index
      %30 = "arith.muli"(%29, %6) : (index, index) -> index
      %31 = "arith.index_cast"(%30) : (index) -> i32
      %32 = "llvm.getelementptr"(%7, %31) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %33 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %34 = "llvm.getelementptr"(%32, %33) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 0>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %35 = "llvm.load"(%34) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
      %36 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %37 = "arith.constant"() <{value = 2 : i32}> : () -> i32
      %38 = "llvm.getelementptr"(%32, %36) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 2>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %39 = "llvm.load"(%38) <{ordering = 0 : i64}> : (!llvm.ptr) -> memref<?xi8>
      "memref.store"(%35, %15, %arg4) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
      "memref.store"(%39, %16, %arg4) <{nontemporal = false}> : (memref<?xi8>, memref<?xmemref<?xi8>>, index) -> ()
      %40 = "arith.addi"(%29, %4) : (index, index) -> index
      "memref.store"(%40, %5) : (index, memref<index>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %18 = "arith.constant"() <{value = 10 : index}> : () -> index
    %19 = "arith.constant"() <{value = 0 : index}> : () -> index
    %20 = "memref.alloca"(%18) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
    %21 = "memref.alloca"(%18) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xmemref<?xi8>>
    %22 = "arith.constant"() <{value = 0 : index}> : () -> index
    "scf.for"(%22, %18, %4) ({
    ^bb0(%arg4: index):
      %29 = "memref.load"(%5) : (memref<index>) -> index
      %30 = "arith.muli"(%29, %6) : (index, index) -> index
      %31 = "arith.index_cast"(%30) : (index) -> i32
      %32 = "llvm.getelementptr"(%7, %31) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %33 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %34 = "llvm.getelementptr"(%32, %33) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 0>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %35 = "llvm.load"(%34) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
      %36 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %37 = "arith.constant"() <{value = 2 : i32}> : () -> i32
      %38 = "llvm.getelementptr"(%32, %36) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 2>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %39 = "llvm.load"(%38) <{ordering = 0 : i64}> : (!llvm.ptr) -> memref<?xi8>
      "memref.store"(%35, %20, %arg4) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
      "memref.store"(%39, %21, %arg4) <{nontemporal = false}> : (memref<?xi8>, memref<?xmemref<?xi8>>, index) -> ()
      %40 = "arith.addi"(%29, %4) : (index, index) -> index
      "memref.store"(%40, %5) : (index, memref<index>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    "scf.for"(%0, %1, %2) ({
    ^bb0(%arg4: index):
      %29 = "polygeist.subindex"(%16, %arg4) : (memref<?xmemref<?xi8>>, index) -> memref<memref<?xi8>>
      %30 = "polygeist.memref2pointer"(%29) : (memref<memref<?xi8>>) -> !llvm.ptr
      %31 = "llvm.load"(%30) <{ordering = 0 : i64}> : (!llvm.ptr) -> !llvm.ptr
      %32 = "llvm.load"(%31) <{ordering = 0 : i64}> : (!llvm.ptr) -> f64
      %33 = "polygeist.subindex"(%11, %arg4) : (memref<?xmemref<?xi8>>, index) -> memref<memref<?xi8>>
      %34 = "polygeist.memref2pointer"(%33) : (memref<memref<?xi8>>) -> !llvm.ptr
      %35 = "llvm.load"(%34) <{ordering = 0 : i64}> : (!llvm.ptr) -> !llvm.ptr
      %36 = "llvm.load"(%35) <{ordering = 0 : i64}> : (!llvm.ptr) -> f64
      %37 = "arith.addf"(%32, %36) <{fastmath = #arith.fastmath<none>}> : (f64, f64) -> f64
      %38 = "polygeist.subindex"(%21, %arg4) : (memref<?xmemref<?xi8>>, index) -> memref<memref<?xi8>>
      %39 = "polygeist.memref2pointer"(%38) : (memref<memref<?xi8>>) -> !llvm.ptr
      %40 = "llvm.load"(%39) <{ordering = 0 : i64}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%37, %40) <{ordering = 0 : i64}> : (f64, !llvm.ptr) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %23 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    %24 = "arith.constant"() <{value = 0 : index}> : () -> index
    "memref.store"(%24, %23) : (index, memref<index>) -> ()
    %25 = "polygeist.memref2pointer"(%arg1) : (memref<?xi64>) -> !llvm.ptr
    %26 = "arith.constant"() <{value = 0 : index}> : () -> index
    %27 = "arith.constant"() <{value = 1 : index}> : () -> index
    %28 = "scf.for"(%26, %18, %27, %23) ({
    ^bb0(%arg4: index, %arg5: memref<index>):
      %29 = "memref.load"(%arg5) : (memref<index>) -> index
      %30 = "arith.index_cast"(%29) : (index) -> i32
      %31 = "llvm.getelementptr"(%25, %30) <{elem_type = i64, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %32 = "llvm.load"(%31) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
      %33 = "polygeist.subindex"(%20, %arg4) : (memref<?xi64>, index) -> memref<i64>
      %34 = "memref.load"(%33) : (memref<i64>) -> i64
      "func.call"(%32, %34) <{callee = @artsPersistentEventDecrementLatch}> : (i64, i64) -> ()
      %35 = "arith.constant"() <{value = 1 : index}> : () -> index
      %36 = "arith.addi"(%29, %35) : (index, index) -> index
      "memref.store"(%36, %arg5) : (index, memref<index>) -> ()
      "scf.yield"(%arg5) : (memref<index>) -> ()
    }) : (index, index, index, memref<index>) -> memref<index>
    "func.return"() : () -> ()
  }) : () -> ()
  "func.func"() <{function_type = (i32, i32, memref<?xmemref<?xi8>>) -> (), sym_name = "initPerWorker"}> ({
  ^bb0(%arg0: i32, %arg1: i32, %arg2: memref<?xmemref<?xi8>>):
    "func.return"() : () -> ()
  }) : () -> ()
  "func.func"() <{function_type = (i32, i32, memref<?xmemref<?xi8>>) -> (), sym_name = "initPerNode"}> ({
  ^bb0(%arg0: i32, %arg1: i32, %arg2: memref<?xmemref<?xi8>>):
    %0 = "arith.index_cast"(%arg0) : (i32) -> index
    %1 = "arith.constant"() <{value = 1 : index}> : () -> index
    %2 = "arith.cmpi"(%0, %1) <{predicate = 9 : i64}> : (index, index) -> i1
    "cf.cond_br"(%2, %arg1, %arg2)[^bb1, ^bb2] <{operandSegmentSizes = array<i32: 1, 0, 2>}> : (i1, i32, memref<?xmemref<?xi8>>) -> ()
  ^bb1:  // pred: ^bb0
    "func.return"() : () -> ()
  ^bb2(%3: i32, %4: memref<?xmemref<?xi8>>):  // pred: ^bb0
    %5 = "func.call"() <{callee = @mainBody}> : () -> i32
    "func.call"() <{callee = @artsShutdown}> : () -> ()
    "func.return"() : () -> ()
  }) : () -> ()
  "func.func"() <{function_type = (i32, memref<?xmemref<?xi8>>) -> i32, sym_name = "main"}> ({
  ^bb0(%arg0: i32, %arg1: memref<?xmemref<?xi8>>):
    %0 = "func.call"(%arg0, %arg1) <{callee = @artsRT}> : (i32, memref<?xmemref<?xi8>>) -> i32
    %1 = "arith.constant"() <{value = 0 : i32}> : () -> i32
    "func.return"(%1) : (i32) -> ()
  }) : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
error: cannot be converted to LLVM IR: missing `LLVMTranslationDialectInterface` registration for dialect for op: func.func
"builtin.module"() ({
  "func.func"() <{function_type = (i32, memref<?xmemref<?xi8>>) -> i32, sym_name = "artsRT", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = () -> (), sym_name = "artsShutdown", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (i64, i64) -> (), sym_name = "artsPersistentEventIncrementLatch", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (i64, i64) -> (), sym_name = "artsPersistentEventDecrementLatch", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = () -> i64, sym_name = "artsGetCurrentEpochGuid", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (i64, i64, i32, i64) -> (), sym_name = "artsAddDependenceToPersistentEvent", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>, i32, i32, memref<?xi64>, i32, i64) -> i64, sym_name = "artsEdtCreateWithEpoch", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (i32, i32, i64) -> i64, sym_name = "artsPersistentEventCreate", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (i64) -> i1, sym_name = "artsWaitOnHandle", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (i64, i32) -> i64, sym_name = "artsInitializeAndStartEpoch", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>, i32, i32, memref<?xi64>, i32) -> i64, sym_name = "artsEdtCreate", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (i64, i64) -> memref<?xi8>, sym_name = "artsDbCreateWithGuid", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (i32, i32) -> i64, sym_name = "artsReserveGuidRoute", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = () -> i32, sym_name = "artsGetCurrentNode", sym_visibility = "private"}> ({
  }) {llvm.linkage = #llvm.linkage<external>, llvm.nounwind, llvm.readnone} : () -> ()
  "llvm.mlir.global"() <{addr_space = 0 : i32, constant, global_type = !llvm.array<39 x i8>, linkage = #llvm.linkage<internal>, sym_name = "str6", unnamed_addr = 0 : i64, value = "Verification encountered %d error(s).\0A\00", visibility_ = 0 : i64}> ({
  }) : () -> ()
  "llvm.mlir.global"() <{addr_space = 0 : i32, constant, global_type = !llvm.array<53 x i8>, linkage = #llvm.linkage<internal>, sym_name = "str5", unnamed_addr = 0 : i64, value = "Verification succeeded: All B elements are correct.\0A\00", visibility_ = 0 : i64}> ({
  }) : () -> ()
  "llvm.mlir.global"() <{addr_space = 0 : i32, constant, global_type = !llvm.array<56 x i8>, linkage = #llvm.linkage<internal>, sym_name = "str4", unnamed_addr = 0 : i64, value = "Verification failed at B[%d][%d]: got %f, expected %f.\0A\00", visibility_ = 0 : i64}> ({
  }) : () -> ()
  "llvm.mlir.global"() <{addr_space = 0 : i32, constant, global_type = !llvm.array<12 x i8>, linkage = #llvm.linkage<internal>, sym_name = "str3", unnamed_addr = 0 : i64, value = "\0AMatrix B:\0A\00", visibility_ = 0 : i64}> ({
  }) : () -> ()
  "llvm.mlir.global"() <{addr_space = 0 : i32, constant, global_type = !llvm.array<2 x i8>, linkage = #llvm.linkage<internal>, sym_name = "str2", unnamed_addr = 0 : i64, value = "\0A\00", visibility_ = 0 : i64}> ({
  }) : () -> ()
  "llvm.mlir.global"() <{addr_space = 0 : i32, constant, global_type = !llvm.array<7 x i8>, linkage = #llvm.linkage<internal>, sym_name = "str1", unnamed_addr = 0 : i64, value = "%6.2f \00", visibility_ = 0 : i64}> ({
  }) : () -> ()
  "llvm.mlir.global"() <{addr_space = 0 : i32, constant, global_type = !llvm.array<11 x i8>, linkage = #llvm.linkage<internal>, sym_name = "str0", unnamed_addr = 0 : i64, value = "Matrix A:\0A\00", visibility_ = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{CConv = #llvm.cconv<ccc>, function_type = !llvm.func<i32 (ptr, ...)>, linkage = #llvm.linkage<external>, sym_name = "printf", unnamed_addr = 0 : i64, visibility_ = 0 : i64}> ({
  }) : () -> ()
  "func.func"() <{function_type = () -> i32, sym_name = "mainBody"}> ({
    %0 = "arith.constant"() <{value = 8 : index}> : () -> index
    %1 = "arith.constant"() <{value = 0 : index}> : () -> index
    %2 = "arith.constant"() <{value = 10 : index}> : () -> index
    %3 = "arith.constant"() <{value = 1 : index}> : () -> index
    %4 = "arith.constant"() <{value = -1 : i32}> : () -> i32
    %5 = "arith.constant"() <{value = 0 : i32}> : () -> i32
    %6 = "arith.constant"() <{value = 1 : i32}> : () -> i32
    %7 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
    %8 = "memref.alloca"(%2, %2) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?xi64>
    %9 = "arith.constant"() <{value = 0 : index}> : () -> index
    %10 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%9, %2, %10) ({
    ^bb0(%arg0: index):
      %91 = "arith.constant"() <{value = 0 : index}> : () -> index
      %92 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%91, %2, %92) ({
      ^bb0(%arg1: index):
        %93 = "arith.constant"() <{value = 0 : i32}> : () -> i32
        %94 = "arith.constant"() <{value = 0 : i64}> : () -> i64
        %95 = "func.call"(%7, %93, %94) <{callee = @artsPersistentEventCreate}> : (i32, i32, i64) -> i64
        "memref.store"(%95, %8, %arg0, %arg1) <{nontemporal = false}> : (i64, memref<?x?xi64>, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %11 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
    %12 = "arith.index_cast"(%0) : (index) -> i64
    %13 = "arith.constant"() <{value = 10 : i32}> : () -> i32
    %14 = "memref.alloca"(%2, %2) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?xi64>
    %15 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<10x10xmemref<?xi8>>
    %16 = "arith.constant"() <{value = 0 : index}> : () -> index
    %17 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%16, %2, %17) ({
    ^bb0(%arg0: index):
      %91 = "arith.constant"() <{value = 0 : index}> : () -> index
      %92 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%91, %2, %92) ({
      ^bb0(%arg1: index):
        %93 = "func.call"(%13, %11) <{callee = @artsReserveGuidRoute}> : (i32, i32) -> i64
        %94 = "func.call"(%93, %12) <{callee = @artsDbCreateWithGuid}> : (i64, i64) -> memref<?xi8>
        "memref.store"(%93, %14, %arg0, %arg1) <{nontemporal = false}> : (i64, memref<?x?xi64>, index, index) -> ()
        "memref.store"(%94, %15, %arg0, %arg1) <{nontemporal = false}> : (memref<?xi8>, memref<10x10xmemref<?xi8>>, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %18 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
    %19 = "memref.alloca"(%2, %2) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?xi64>
    %20 = "arith.constant"() <{value = 0 : index}> : () -> index
    %21 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%20, %2, %21) ({
    ^bb0(%arg0: index):
      %91 = "arith.constant"() <{value = 0 : index}> : () -> index
      %92 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%91, %2, %92) ({
      ^bb0(%arg1: index):
        %93 = "arith.constant"() <{value = 0 : i32}> : () -> i32
        %94 = "arith.constant"() <{value = 0 : i64}> : () -> i64
        %95 = "func.call"(%18, %93, %94) <{callee = @artsPersistentEventCreate}> : (i32, i32, i64) -> i64
        "memref.store"(%95, %19, %arg0, %arg1) <{nontemporal = false}> : (i64, memref<?x?xi64>, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %22 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
    %23 = "arith.index_cast"(%0) : (index) -> i64
    %24 = "arith.constant"() <{value = 10 : i32}> : () -> i32
    %25 = "memref.alloca"(%2, %2) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?xi64>
    %26 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<10x10xmemref<?xi8>>
    %27 = "arith.constant"() <{value = 0 : index}> : () -> index
    %28 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%27, %2, %28) ({
    ^bb0(%arg0: index):
      %91 = "arith.constant"() <{value = 0 : index}> : () -> index
      %92 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%91, %2, %92) ({
      ^bb0(%arg1: index):
        %93 = "func.call"(%24, %22) <{callee = @artsReserveGuidRoute}> : (i32, i32) -> i64
        %94 = "func.call"(%93, %23) <{callee = @artsDbCreateWithGuid}> : (i64, i64) -> memref<?xi8>
        "memref.store"(%93, %25, %arg0, %arg1) <{nontemporal = false}> : (i64, memref<?x?xi64>, index, index) -> ()
        "memref.store"(%94, %26, %arg0, %arg1) <{nontemporal = false}> : (memref<?xi8>, memref<10x10xmemref<?xi8>>, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %29 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
    %30 = "arith.constant"() <{value = 0 : index}> : () -> index
    %31 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%30, %31) : (index, memref<index>) -> ()
    %32 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%30, %32) : (index, memref<index>) -> ()
    %33 = "memref.load"(%32) : (memref<index>) -> index
    %34 = "arith.index_cast"(%33) : (index) -> i32
    %35 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    %36 = "arith.constant"() <{value = 0 : index}> : () -> index
    "memref.store"(%36, %35) : (index, memref<index>) -> ()
    %37 = "memref.load"(%35) : (memref<index>) -> index
    %38 = "arith.index_cast"(%37) : (index) -> i32
    %39 = "memref.alloca"(%37) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
    %40 = "arith.constant"() <{value = 1 : i32}> : () -> i32
    %41 = "polygeist.get_func"() <{name = @__arts_edt_1}> : () -> !llvm.ptr<!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>
    %42 = "polygeist.pointer2memref"(%41) : (!llvm.ptr<!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>) -> memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>
    %43 = "func.call"(%42, %29, %38, %39, %40) <{callee = @artsEdtCreate}> : (memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>, i32, i32, memref<?xi64>, i32) -> i64
    %44 = "arith.constant"() <{value = 0 : i32}> : () -> i32
    %45 = "func.call"(%43, %44) <{callee = @artsInitializeAndStartEpoch}> : (i64, i32) -> i64
    %46 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
    %47 = "arith.constant"() <{value = 0 : index}> : () -> index
    %48 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%47, %48) : (index, memref<index>) -> ()
    %49 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%47, %49) : (index, memref<index>) -> ()
    %50 = "memref.load"(%49) : (memref<index>) -> index
    %51 = "arith.constant"() <{value = 1 : index}> : () -> index
    %52 = "arith.muli"(%51, %2) : (index, index) -> index
    %53 = "arith.muli"(%52, %2) : (index, index) -> index
    %54 = "memref.load"(%49) : (memref<index>) -> index
    %55 = "arith.addi"(%54, %53) : (index, index) -> index
    "memref.store"(%55, %49) : (index, memref<index>) -> ()
    %56 = "memref.load"(%49) : (memref<index>) -> index
    %57 = "arith.constant"() <{value = 1 : index}> : () -> index
    %58 = "arith.muli"(%57, %2) : (index, index) -> index
    %59 = "arith.muli"(%58, %2) : (index, index) -> index
    %60 = "memref.load"(%49) : (memref<index>) -> index
    %61 = "arith.addi"(%60, %59) : (index, index) -> index
    "memref.store"(%61, %49) : (index, memref<index>) -> ()
    %62 = "memref.load"(%49) : (memref<index>) -> index
    %63 = "arith.index_cast"(%62) : (index) -> i32
    %64 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    %65 = "arith.constant"() <{value = 0 : index}> : () -> index
    "memref.store"(%65, %64) : (index, memref<index>) -> ()
    %66 = "memref.load"(%64) : (memref<index>) -> index
    %67 = "arith.index_cast"(%66) : (index) -> i32
    %68 = "memref.alloca"(%66) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
    %69 = "polygeist.get_func"() <{name = @__arts_edt_2}> : () -> !llvm.ptr<!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>
    %70 = "polygeist.pointer2memref"(%69) : (!llvm.ptr<!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>) -> memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>
    %71 = "func.call"(%70, %46, %67, %68, %63, %45) <{callee = @artsEdtCreateWithEpoch}> : (memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>, i32, i32, memref<?xi64>, i32, i64) -> i64
    %72 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%50, %72) : (index, memref<index>) -> ()
    %73 = "arith.addi"(%1, %2) : (index, index) -> index
    %74 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%1, %73, %74) ({
    ^bb0(%arg0: index):
      %91 = "arith.addi"(%1, %2) : (index, index) -> index
      %92 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%1, %91, %92) ({
      ^bb0(%arg1: index):
        %93 = "memref.load"(%8, %arg0, %arg1) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        %94 = "memref.load"(%72) : (memref<index>) -> index
        %95 = "memref.load"(%14, %arg0, %arg1) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        %96 = "arith.index_cast"(%94) : (index) -> i32
        "func.call"(%93, %71, %96, %95) <{callee = @artsAddDependenceToPersistentEvent}> : (i64, i64, i32, i64) -> ()
        %97 = "arith.constant"() <{value = 1 : index}> : () -> index
        %98 = "arith.addi"(%94, %97) : (index, index) -> index
        "memref.store"(%98, %72) : (index, memref<index>) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %75 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%56, %75) : (index, memref<index>) -> ()
    %76 = "arith.addi"(%1, %2) : (index, index) -> index
    %77 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%1, %76, %77) ({
    ^bb0(%arg0: index):
      %91 = "arith.addi"(%1, %2) : (index, index) -> index
      %92 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%1, %91, %92) ({
      ^bb0(%arg1: index):
        %93 = "memref.load"(%19, %arg0, %arg1) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        %94 = "memref.load"(%75) : (memref<index>) -> index
        %95 = "memref.load"(%25, %arg0, %arg1) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        %96 = "arith.index_cast"(%94) : (index) -> i32
        "func.call"(%93, %71, %96, %95) <{callee = @artsAddDependenceToPersistentEvent}> : (i64, i64, i32, i64) -> ()
        %97 = "arith.constant"() <{value = 1 : index}> : () -> index
        %98 = "arith.addi"(%94, %97) : (index, index) -> index
        "memref.store"(%98, %75) : (index, memref<index>) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %78 = "func.call"(%45) <{callee = @artsWaitOnHandle}> : (i64) -> i1
    %79 = "llvm.mlir.addressof"() <{global_name = @str0}> : () -> !llvm.ptr
    %80 = "llvm.getelementptr"(%79) <{elem_type = !llvm.array<11 x i8>, rawConstantIndices = array<i32: 0, 0>}> : (!llvm.ptr) -> !llvm.ptr
    %81 = "llvm.call"(%80) <{callee = @printf, callee_type = !llvm.func<i32 (ptr, ...)>, fastmathFlags = #llvm.fastmath<none>}> : (!llvm.ptr) -> i32
    %82 = "llvm.mlir.addressof"() <{global_name = @str1}> : () -> !llvm.ptr
    %83 = "llvm.getelementptr"(%82) <{elem_type = !llvm.array<7 x i8>, rawConstantIndices = array<i32: 0, 0>}> : (!llvm.ptr) -> !llvm.ptr
    %84 = "llvm.mlir.addressof"() <{global_name = @str2}> : () -> !llvm.ptr
    %85 = "llvm.getelementptr"(%84) <{elem_type = !llvm.array<2 x i8>, rawConstantIndices = array<i32: 0, 0>}> : (!llvm.ptr) -> !llvm.ptr
    "scf.for"(%1, %2, %3) ({
    ^bb0(%arg0: index):
      "scf.for"(%1, %2, %3) ({
      ^bb0(%arg1: index):
        %92 = "polygeist.subindex"(%26, %arg0) : (memref<10x10xmemref<?xi8>>, index) -> memref<10xmemref<?xi8>>
        %93 = "polygeist.subindex"(%92, %arg1) : (memref<10xmemref<?xi8>>, index) -> memref<memref<?xi8>>
        %94 = "polygeist.memref2pointer"(%93) : (memref<memref<?xi8>>) -> !llvm.ptr
        %95 = "llvm.load"(%94) <{ordering = 0 : i64}> : (!llvm.ptr) -> !llvm.ptr
        %96 = "llvm.load"(%95) <{ordering = 0 : i64}> : (!llvm.ptr) -> f64
        %97 = "llvm.call"(%83, %96) <{callee = @printf, callee_type = !llvm.func<i32 (ptr, ...)>, fastmathFlags = #llvm.fastmath<none>}> : (!llvm.ptr, f64) -> i32
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      %91 = "llvm.call"(%85) <{callee = @printf, callee_type = !llvm.func<i32 (ptr, ...)>, fastmathFlags = #llvm.fastmath<none>}> : (!llvm.ptr) -> i32
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %86 = "llvm.mlir.addressof"() <{global_name = @str3}> : () -> !llvm.ptr
    %87 = "llvm.getelementptr"(%86) <{elem_type = !llvm.array<12 x i8>, rawConstantIndices = array<i32: 0, 0>}> : (!llvm.ptr) -> !llvm.ptr
    %88 = "llvm.call"(%87) <{callee = @printf, callee_type = !llvm.func<i32 (ptr, ...)>, fastmathFlags = #llvm.fastmath<none>}> : (!llvm.ptr) -> i32
    "scf.for"(%1, %2, %3) ({
    ^bb0(%arg0: index):
      "scf.for"(%1, %2, %3) ({
      ^bb0(%arg1: index):
        %92 = "polygeist.subindex"(%15, %arg0) : (memref<10x10xmemref<?xi8>>, index) -> memref<10xmemref<?xi8>>
        %93 = "polygeist.subindex"(%92, %arg1) : (memref<10xmemref<?xi8>>, index) -> memref<memref<?xi8>>
        %94 = "polygeist.memref2pointer"(%93) : (memref<memref<?xi8>>) -> !llvm.ptr
        %95 = "llvm.load"(%94) <{ordering = 0 : i64}> : (!llvm.ptr) -> !llvm.ptr
        %96 = "llvm.load"(%95) <{ordering = 0 : i64}> : (!llvm.ptr) -> f64
        %97 = "llvm.call"(%83, %96) <{callee = @printf, callee_type = !llvm.func<i32 (ptr, ...)>, fastmathFlags = #llvm.fastmath<none>}> : (!llvm.ptr, f64) -> i32
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      %91 = "llvm.call"(%85) <{callee = @printf, callee_type = !llvm.func<i32 (ptr, ...)>, fastmathFlags = #llvm.fastmath<none>}> : (!llvm.ptr) -> i32
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %89 = "scf.for"(%1, %2, %3, %5) ({
    ^bb0(%arg0: index, %arg1: i32):
      %91 = "arith.index_cast"(%arg0) : (index) -> i32
      %92 = "arith.cmpi"(%91, %5) <{predicate = 0 : i64}> : (i32, i32) -> i1
      %93 = "scf.for"(%1, %2, %3, %arg1) ({
      ^bb0(%arg2: index, %arg3: i32):
        %94 = "arith.index_cast"(%arg2) : (index) -> i32
        %95 = "scf.if"(%92) ({
          %103 = "arith.addi"(%91, %94) : (i32, i32) -> i32
          %104 = "arith.sitofp"(%103) : (i32) -> f64
          "scf.yield"(%104) : (f64) -> ()
        }, {
          %103 = "arith.addi"(%91, %94) : (i32, i32) -> i32
          %104 = "arith.addi"(%91, %4) : (i32, i32) -> i32
          %105 = "arith.addi"(%104, %94) : (i32, i32) -> i32
          %106 = "arith.addi"(%103, %105) : (i32, i32) -> i32
          %107 = "arith.sitofp"(%106) : (i32) -> f64
          "scf.yield"(%107) : (f64) -> ()
        }) : (i1) -> f64
        %96 = "polygeist.subindex"(%15, %arg0) : (memref<10x10xmemref<?xi8>>, index) -> memref<10xmemref<?xi8>>
        %97 = "polygeist.subindex"(%96, %arg2) : (memref<10xmemref<?xi8>>, index) -> memref<memref<?xi8>>
        %98 = "polygeist.memref2pointer"(%97) : (memref<memref<?xi8>>) -> !llvm.ptr
        %99 = "llvm.load"(%98) <{ordering = 0 : i64}> : (!llvm.ptr) -> !llvm.ptr
        %100 = "llvm.load"(%99) <{ordering = 0 : i64}> : (!llvm.ptr) -> f64
        %101 = "arith.cmpf"(%100, %95) <{predicate = 13 : i64}> : (f64, f64) -> i1
        %102 = "scf.if"(%101) ({
          %103 = "llvm.mlir.addressof"() <{global_name = @str4}> : () -> !llvm.ptr
          %104 = "llvm.getelementptr"(%103) <{elem_type = !llvm.array<56 x i8>, rawConstantIndices = array<i32: 0, 0>}> : (!llvm.ptr) -> !llvm.ptr
          %105 = "llvm.call"(%104, %91, %94, %100, %95) <{callee = @printf, callee_type = !llvm.func<i32 (ptr, ...)>, fastmathFlags = #llvm.fastmath<none>}> : (!llvm.ptr, i32, i32, f64, f64) -> i32
          %106 = "arith.addi"(%arg3, %6) : (i32, i32) -> i32
          "scf.yield"(%106) : (i32) -> ()
        }, {
          "scf.yield"(%arg3) : (i32) -> ()
        }) : (i1) -> i32
        "scf.yield"(%102) : (i32) -> ()
      }) : (index, index, index, i32) -> i32
      "scf.yield"(%93) : (i32) -> ()
    }) : (index, index, index, i32) -> i32
    %90 = "arith.cmpi"(%89, %5) <{predicate = 0 : i64}> : (i32, i32) -> i1
    "scf.if"(%90) ({
      %91 = "llvm.mlir.addressof"() <{global_name = @str5}> : () -> !llvm.ptr
      %92 = "llvm.getelementptr"(%91) <{elem_type = !llvm.array<53 x i8>, rawConstantIndices = array<i32: 0, 0>}> : (!llvm.ptr) -> !llvm.ptr
      %93 = "llvm.call"(%92) <{callee = @printf, callee_type = !llvm.func<i32 (ptr, ...)>, fastmathFlags = #llvm.fastmath<none>}> : (!llvm.ptr) -> i32
      "scf.yield"() : () -> ()
    }, {
      %91 = "llvm.mlir.addressof"() <{global_name = @str6}> : () -> !llvm.ptr
      %92 = "llvm.getelementptr"(%91) <{elem_type = !llvm.array<39 x i8>, rawConstantIndices = array<i32: 0, 0>}> : (!llvm.ptr) -> !llvm.ptr
      %93 = "llvm.call"(%92, %89) <{callee = @printf, callee_type = !llvm.func<i32 (ptr, ...)>, fastmathFlags = #llvm.fastmath<none>}> : (!llvm.ptr, i32) -> i32
      "scf.yield"() : () -> ()
    }) : (i1) -> ()
    "func.return"(%5) : (i32) -> ()
  }) {llvm.linkage = #llvm.linkage<external>} : () -> ()
  "func.func"() <{function_type = (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>) -> (), sym_name = "__arts_edt_1", sym_visibility = "private"}> ({
  ^bb0(%arg0: i32, %arg1: memref<?xi64>, %arg2: i32, %arg3: memref<?x!llvm.struct<(i64, i32, ptr)>>):
    "func.return"() : () -> ()
  }) : () -> ()
  "func.func"() <{function_type = (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>) -> (), sym_name = "__arts_edt_2", sym_visibility = "private"}> ({
  ^bb0(%arg0: i32, %arg1: memref<?xi64>, %arg2: i32, %arg3: memref<?x!llvm.struct<(i64, i32, ptr)>>):
    %0 = "arith.constant"() <{value = 10 : index}> : () -> index
    %1 = "arith.constant"() <{value = 8 : index}> : () -> index
    %2 = "arith.constant"() <{value = 0 : index}> : () -> index
    %3 = "arith.constant"() <{value = 1 : index}> : () -> index
    %4 = "arith.constant"() <{value = -1 : i32}> : () -> i32
    %5 = "arith.constant"() <{value = 0 : index}> : () -> index
    %6 = "arith.constant"() <{value = 1 : index}> : () -> index
    %7 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%5, %7) : (index, memref<index>) -> ()
    %8 = "polygeist.typeSize"() <{source = !llvm.struct<(i64, i32, ptr)>}> : () -> index
    %9 = "polygeist.memref2pointer"(%arg3) : (memref<?x!llvm.struct<(i64, i32, ptr)>>) -> !llvm.ptr
    %10 = "arith.constant"() <{value = 10 : index}> : () -> index
    %11 = "arith.constant"() <{value = 0 : index}> : () -> index
    %12 = "arith.constant"() <{value = 10 : index}> : () -> index
    %13 = "arith.constant"() <{value = 0 : index}> : () -> index
    %14 = "memref.alloca"(%10, %12) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?xi64>
    %15 = "memref.alloca"(%10, %12) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?xmemref<?xi8>>
    %16 = "arith.constant"() <{value = 0 : index}> : () -> index
    "scf.for"(%16, %10, %6) ({
    ^bb0(%arg4: index):
      %76 = "arith.constant"() <{value = 0 : index}> : () -> index
      "scf.for"(%76, %12, %6) ({
      ^bb0(%arg5: index):
        %77 = "memref.load"(%7) : (memref<index>) -> index
        %78 = "arith.muli"(%77, %8) : (index, index) -> index
        %79 = "arith.index_cast"(%78) : (index) -> i32
        %80 = "llvm.getelementptr"(%9, %79) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
        %81 = "arith.constant"() <{value = 0 : i32}> : () -> i32
        %82 = "llvm.getelementptr"(%80, %81) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 0>}> : (!llvm.ptr, i32) -> !llvm.ptr
        %83 = "llvm.load"(%82) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
        %84 = "arith.constant"() <{value = 0 : i32}> : () -> i32
        %85 = "arith.constant"() <{value = 2 : i32}> : () -> i32
        %86 = "llvm.getelementptr"(%80, %84) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 2>}> : (!llvm.ptr, i32) -> !llvm.ptr
        %87 = "llvm.load"(%86) <{ordering = 0 : i64}> : (!llvm.ptr) -> memref<?xi8>
        "memref.store"(%83, %14, %arg4, %arg5) <{nontemporal = false}> : (i64, memref<?x?xi64>, index, index) -> ()
        "memref.store"(%87, %15, %arg4, %arg5) <{nontemporal = false}> : (memref<?xi8>, memref<?x?xmemref<?xi8>>, index, index) -> ()
        %88 = "arith.addi"(%77, %6) : (index, index) -> index
        "memref.store"(%88, %7) : (index, memref<index>) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %17 = "arith.constant"() <{value = 10 : index}> : () -> index
    %18 = "arith.constant"() <{value = 0 : index}> : () -> index
    %19 = "arith.constant"() <{value = 10 : index}> : () -> index
    %20 = "arith.constant"() <{value = 0 : index}> : () -> index
    %21 = "memref.alloca"(%17, %19) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?xi64>
    %22 = "memref.alloca"(%17, %19) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?xmemref<?xi8>>
    %23 = "arith.constant"() <{value = 0 : index}> : () -> index
    "scf.for"(%23, %17, %6) ({
    ^bb0(%arg4: index):
      %76 = "arith.constant"() <{value = 0 : index}> : () -> index
      "scf.for"(%76, %19, %6) ({
      ^bb0(%arg5: index):
        %77 = "memref.load"(%7) : (memref<index>) -> index
        %78 = "arith.muli"(%77, %8) : (index, index) -> index
        %79 = "arith.index_cast"(%78) : (index) -> i32
        %80 = "llvm.getelementptr"(%9, %79) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
        %81 = "arith.constant"() <{value = 0 : i32}> : () -> i32
        %82 = "llvm.getelementptr"(%80, %81) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 0>}> : (!llvm.ptr, i32) -> !llvm.ptr
        %83 = "llvm.load"(%82) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
        %84 = "arith.constant"() <{value = 0 : i32}> : () -> i32
        %85 = "arith.constant"() <{value = 2 : i32}> : () -> i32
        %86 = "llvm.getelementptr"(%80, %84) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 2>}> : (!llvm.ptr, i32) -> !llvm.ptr
        %87 = "llvm.load"(%86) <{ordering = 0 : i64}> : (!llvm.ptr) -> memref<?xi8>
        "memref.store"(%83, %21, %arg4, %arg5) <{nontemporal = false}> : (i64, memref<?x?xi64>, index, index) -> ()
        "memref.store"(%87, %22, %arg4, %arg5) <{nontemporal = false}> : (memref<?xi8>, memref<?x?xmemref<?xi8>>, index, index) -> ()
        %88 = "arith.addi"(%77, %6) : (index, index) -> index
        "memref.store"(%88, %7) : (index, memref<index>) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %24 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
    %25 = "memref.alloca"(%0, %0) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?xi64>
    %26 = "arith.constant"() <{value = 0 : index}> : () -> index
    %27 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%26, %0, %27) ({
    ^bb0(%arg4: index):
      %76 = "arith.constant"() <{value = 0 : index}> : () -> index
      %77 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%76, %0, %77) ({
      ^bb0(%arg5: index):
        %78 = "arith.constant"() <{value = 0 : i32}> : () -> i32
        %79 = "arith.constant"() <{value = 0 : i64}> : () -> i64
        %80 = "func.call"(%24, %78, %79) <{callee = @artsPersistentEventCreate}> : (i32, i32, i64) -> i64
        "memref.store"(%80, %25, %arg4, %arg5) <{nontemporal = false}> : (i64, memref<?x?xi64>, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %28 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
    %29 = "memref.alloca"(%0, %0) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?xi64>
    %30 = "arith.constant"() <{value = 0 : index}> : () -> index
    %31 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%30, %0, %31) ({
    ^bb0(%arg4: index):
      %76 = "arith.constant"() <{value = 0 : index}> : () -> index
      %77 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%76, %0, %77) ({
      ^bb0(%arg5: index):
        %78 = "arith.constant"() <{value = 0 : i32}> : () -> i32
        %79 = "arith.constant"() <{value = 0 : i64}> : () -> i64
        %80 = "func.call"(%28, %78, %79) <{callee = @artsPersistentEventCreate}> : (i32, i32, i64) -> i64
        "memref.store"(%80, %29, %arg4, %arg5) <{nontemporal = false}> : (i64, memref<?x?xi64>, index, index) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    "scf.for"(%2, %0, %3) ({
    ^bb0(%arg4: index):
      %76 = "arith.index_cast"(%arg4) : (index) -> i32
      %77 = "func.call"() <{callee = @artsGetCurrentEpochGuid}> : () -> i64
      %78 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
      %79 = "arith.constant"() <{value = 0 : index}> : () -> index
      %80 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      "memref.store"(%79, %80) : (index, memref<index>) -> ()
      %81 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      "memref.store"(%79, %81) : (index, memref<index>) -> ()
      %82 = "memref.load"(%81) : (memref<index>) -> index
      %83 = "arith.constant"() <{value = 1 : index}> : () -> index
      %84 = "arith.muli"(%83, %0) : (index, index) -> index
      %85 = "memref.load"(%81) : (memref<index>) -> index
      %86 = "arith.addi"(%85, %84) : (index, index) -> index
      "memref.store"(%86, %81) : (index, memref<index>) -> ()
      %87 = "memref.load"(%80) : (memref<index>) -> index
      %88 = "arith.addi"(%87, %84) : (index, index) -> index
      "memref.store"(%88, %80) : (index, memref<index>) -> ()
      %89 = "memref.load"(%81) : (memref<index>) -> index
      %90 = "arith.index_cast"(%89) : (index) -> i32
      %91 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      %92 = "arith.constant"() <{value = 1 : index}> : () -> index
      "memref.store"(%92, %91) : (index, memref<index>) -> ()
      %93 = "memref.load"(%91) : (memref<index>) -> index
      %94 = "memref.load"(%80) : (memref<index>) -> index
      %95 = "arith.addi"(%93, %94) : (index, index) -> index
      "memref.store"(%95, %91) : (index, memref<index>) -> ()
      %96 = "memref.load"(%91) : (memref<index>) -> index
      %97 = "arith.index_cast"(%96) : (index) -> i32
      %98 = "memref.alloca"(%96) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
      %99 = "arith.constant"() <{value = 0 : index}> : () -> index
      %100 = "arith.extsi"(%76) : (i32) -> i64
      "memref.store"(%100, %98, %99) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
      %101 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      %102 = "arith.constant"() <{value = 1 : index}> : () -> index
      "memref.store"(%102, %101) : (index, memref<index>) -> ()
      %103 = "arith.addi"(%2, %0) : (index, index) -> index
      %104 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%2, %103, %104) ({
      ^bb0(%arg5: index):
        %115 = "memref.load"(%29, %arg4, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        %116 = "memref.load"(%101) : (memref<index>) -> index
        "memref.store"(%115, %98, %116) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
        %117 = "arith.constant"() <{value = 1 : index}> : () -> index
        %118 = "arith.addi"(%116, %117) : (index, index) -> index
        "memref.store"(%118, %101) : (index, memref<index>) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      %105 = "polygeist.get_func"() <{name = @__arts_edt_3}> : () -> !llvm.ptr<!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>
      %106 = "polygeist.pointer2memref"(%105) : (!llvm.ptr<!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>) -> memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>
      %107 = "func.call"(%106, %78, %97, %98, %90, %77) <{callee = @artsEdtCreateWithEpoch}> : (memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>, i32, i32, memref<?xi64>, i32, i64) -> i64
      %108 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      "memref.store"(%82, %108) : (index, memref<index>) -> ()
      %109 = "arith.addi"(%2, %0) : (index, index) -> index
      %110 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%2, %109, %110) ({
      ^bb0(%arg5: index):
        %115 = "memref.load"(%29, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index) -> i64
        %116 = "memref.load"(%108) : (memref<index>) -> index
        %117 = "memref.load"(%21, %arg4, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        %118 = "arith.index_cast"(%116) : (index) -> i32
        "func.call"(%115, %107, %118, %117) <{callee = @artsAddDependenceToPersistentEvent}> : (i64, i64, i32, i64) -> ()
        %119 = "arith.constant"() <{value = 1 : index}> : () -> index
        %120 = "arith.addi"(%116, %119) : (index, index) -> index
        "memref.store"(%120, %108) : (index, memref<index>) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      %111 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      "memref.store"(%82, %111) : (index, memref<index>) -> ()
      %112 = "arith.addi"(%2, %0) : (index, index) -> index
      %113 = "arith.constant"() <{value = 1 : index}> : () -> index
      %114 = "scf.for"(%2, %112, %113, %111) ({
      ^bb0(%arg5: index, %arg6: memref<index>):
        %115 = "memref.load"(%29, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index) -> i64
        %116 = "memref.load"(%21, %arg4, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        "func.call"(%115, %116) <{callee = @artsPersistentEventIncrementLatch}> : (i64, i64) -> ()
        %117 = "memref.load"(%arg6) : (memref<index>) -> index
        %118 = "arith.constant"() <{value = 1 : index}> : () -> index
        %119 = "arith.addi"(%117, %118) : (index, index) -> index
        "memref.store"(%119, %arg6) : (index, memref<index>) -> ()
        "scf.yield"(%arg6) : (memref<index>) -> ()
      }) : (index, index, index, memref<index>) -> memref<index>
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %32 = "func.call"() <{callee = @artsGetCurrentEpochGuid}> : () -> i64
    %33 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
    %34 = "arith.constant"() <{value = 0 : index}> : () -> index
    %35 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%34, %35) : (index, memref<index>) -> ()
    %36 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%34, %36) : (index, memref<index>) -> ()
    %37 = "memref.load"(%36) : (memref<index>) -> index
    %38 = "arith.constant"() <{value = 1 : index}> : () -> index
    %39 = "arith.muli"(%38, %0) : (index, index) -> index
    %40 = "memref.load"(%36) : (memref<index>) -> index
    %41 = "arith.addi"(%40, %39) : (index, index) -> index
    "memref.store"(%41, %36) : (index, memref<index>) -> ()
    %42 = "memref.load"(%35) : (memref<index>) -> index
    %43 = "arith.addi"(%42, %39) : (index, index) -> index
    "memref.store"(%43, %35) : (index, memref<index>) -> ()
    %44 = "memref.load"(%36) : (memref<index>) -> index
    %45 = "arith.constant"() <{value = 1 : index}> : () -> index
    %46 = "arith.muli"(%45, %0) : (index, index) -> index
    %47 = "memref.load"(%36) : (memref<index>) -> index
    %48 = "arith.addi"(%47, %46) : (index, index) -> index
    "memref.store"(%48, %36) : (index, memref<index>) -> ()
    %49 = "memref.load"(%36) : (memref<index>) -> index
    %50 = "arith.index_cast"(%49) : (index) -> i32
    %51 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    %52 = "arith.constant"() <{value = 0 : index}> : () -> index
    "memref.store"(%52, %51) : (index, memref<index>) -> ()
    %53 = "memref.load"(%51) : (memref<index>) -> index
    %54 = "memref.load"(%35) : (memref<index>) -> index
    %55 = "arith.addi"(%53, %54) : (index, index) -> index
    "memref.store"(%55, %51) : (index, memref<index>) -> ()
    %56 = "memref.load"(%51) : (memref<index>) -> index
    %57 = "arith.index_cast"(%56) : (index) -> i32
    %58 = "memref.alloca"(%56) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
    %59 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    %60 = "arith.constant"() <{value = 0 : index}> : () -> index
    "memref.store"(%60, %59) : (index, memref<index>) -> ()
    %61 = "arith.addi"(%2, %0) : (index, index) -> index
    %62 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%2, %61, %62) ({
    ^bb0(%arg4: index):
      %76 = "memref.load"(%25, %2, %arg4) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
      %77 = "memref.load"(%59) : (memref<index>) -> index
      "memref.store"(%76, %58, %77) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
      %78 = "arith.constant"() <{value = 1 : index}> : () -> index
      %79 = "arith.addi"(%77, %78) : (index, index) -> index
      "memref.store"(%79, %59) : (index, memref<index>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %63 = "polygeist.get_func"() <{name = @__arts_edt_4}> : () -> !llvm.ptr<!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>
    %64 = "polygeist.pointer2memref"(%63) : (!llvm.ptr<!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>) -> memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>
    %65 = "func.call"(%64, %33, %57, %58, %50, %32) <{callee = @artsEdtCreateWithEpoch}> : (memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>, i32, i32, memref<?xi64>, i32, i64) -> i64
    %66 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%37, %66) : (index, memref<index>) -> ()
    %67 = "arith.addi"(%2, %0) : (index, index) -> index
    %68 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%2, %67, %68) ({
    ^bb0(%arg4: index):
      %76 = "memref.load"(%25, %arg4) <{nontemporal = false}> : (memref<?x?xi64>, index) -> i64
      %77 = "memref.load"(%66) : (memref<index>) -> index
      %78 = "memref.load"(%14, %2, %arg4) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
      %79 = "arith.index_cast"(%77) : (index) -> i32
      "func.call"(%76, %65, %79, %78) <{callee = @artsAddDependenceToPersistentEvent}> : (i64, i64, i32, i64) -> ()
      %80 = "arith.constant"() <{value = 1 : index}> : () -> index
      %81 = "arith.addi"(%77, %80) : (index, index) -> index
      "memref.store"(%81, %66) : (index, memref<index>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %69 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%44, %69) : (index, memref<index>) -> ()
    %70 = "arith.addi"(%2, %0) : (index, index) -> index
    %71 = "arith.constant"() <{value = 1 : index}> : () -> index
    "scf.for"(%2, %70, %71) ({
    ^bb0(%arg4: index):
      %76 = "memref.load"(%29, %arg4) <{nontemporal = false}> : (memref<?x?xi64>, index) -> i64
      %77 = "memref.load"(%69) : (memref<index>) -> index
      %78 = "memref.load"(%21, %2, %arg4) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
      %79 = "arith.index_cast"(%77) : (index) -> i32
      "func.call"(%76, %65, %79, %78) <{callee = @artsAddDependenceToPersistentEvent}> : (i64, i64, i32, i64) -> ()
      %80 = "arith.constant"() <{value = 1 : index}> : () -> index
      %81 = "arith.addi"(%77, %80) : (index, index) -> index
      "memref.store"(%81, %69) : (index, memref<index>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %72 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%37, %72) : (index, memref<index>) -> ()
    %73 = "arith.addi"(%2, %0) : (index, index) -> index
    %74 = "arith.constant"() <{value = 1 : index}> : () -> index
    %75 = "scf.for"(%2, %73, %74, %72) ({
    ^bb0(%arg4: index, %arg5: memref<index>):
      %76 = "memref.load"(%25, %arg4) <{nontemporal = false}> : (memref<?x?xi64>, index) -> i64
      %77 = "memref.load"(%14, %2, %arg4) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
      "func.call"(%76, %77) <{callee = @artsPersistentEventIncrementLatch}> : (i64, i64) -> ()
      %78 = "memref.load"(%arg5) : (memref<index>) -> index
      %79 = "arith.constant"() <{value = 1 : index}> : () -> index
      %80 = "arith.addi"(%78, %79) : (index, index) -> index
      "memref.store"(%80, %arg5) : (index, memref<index>) -> ()
      "scf.yield"(%arg5) : (memref<index>) -> ()
    }) : (index, index, index, memref<index>) -> memref<index>
    "scf.for"(%3, %0, %3) ({
    ^bb0(%arg4: index):
      %76 = "arith.index_cast"(%arg4) : (index) -> i32
      %77 = "arith.addi"(%76, %4) : (i32, i32) -> i32
      %78 = "arith.index_cast"(%77) : (i32) -> index
      %79 = "func.call"() <{callee = @artsGetCurrentEpochGuid}> : () -> i64
      %80 = "func.call"() <{callee = @artsGetCurrentNode}> : () -> i32
      %81 = "arith.constant"() <{value = 0 : index}> : () -> index
      %82 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      "memref.store"(%81, %82) : (index, memref<index>) -> ()
      %83 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      "memref.store"(%81, %83) : (index, memref<index>) -> ()
      %84 = "memref.load"(%83) : (memref<index>) -> index
      %85 = "arith.constant"() <{value = 1 : index}> : () -> index
      %86 = "arith.muli"(%85, %0) : (index, index) -> index
      %87 = "memref.load"(%83) : (memref<index>) -> index
      %88 = "arith.addi"(%87, %86) : (index, index) -> index
      "memref.store"(%88, %83) : (index, memref<index>) -> ()
      %89 = "memref.load"(%83) : (memref<index>) -> index
      %90 = "arith.constant"() <{value = 1 : index}> : () -> index
      %91 = "arith.muli"(%90, %0) : (index, index) -> index
      %92 = "memref.load"(%83) : (memref<index>) -> index
      %93 = "arith.addi"(%92, %91) : (index, index) -> index
      "memref.store"(%93, %83) : (index, memref<index>) -> ()
      %94 = "memref.load"(%83) : (memref<index>) -> index
      %95 = "arith.constant"() <{value = 1 : index}> : () -> index
      %96 = "arith.muli"(%95, %0) : (index, index) -> index
      %97 = "memref.load"(%83) : (memref<index>) -> index
      %98 = "arith.addi"(%97, %96) : (index, index) -> index
      "memref.store"(%98, %83) : (index, memref<index>) -> ()
      %99 = "memref.load"(%82) : (memref<index>) -> index
      %100 = "arith.addi"(%99, %96) : (index, index) -> index
      "memref.store"(%100, %82) : (index, memref<index>) -> ()
      %101 = "memref.load"(%83) : (memref<index>) -> index
      %102 = "arith.index_cast"(%101) : (index) -> i32
      %103 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      %104 = "arith.constant"() <{value = 0 : index}> : () -> index
      "memref.store"(%104, %103) : (index, memref<index>) -> ()
      %105 = "memref.load"(%103) : (memref<index>) -> index
      %106 = "memref.load"(%82) : (memref<index>) -> index
      %107 = "arith.addi"(%105, %106) : (index, index) -> index
      "memref.store"(%107, %103) : (index, memref<index>) -> ()
      %108 = "memref.load"(%103) : (memref<index>) -> index
      %109 = "arith.index_cast"(%108) : (index) -> i32
      %110 = "memref.alloca"(%108) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
      %111 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      %112 = "arith.constant"() <{value = 0 : index}> : () -> index
      "memref.store"(%112, %111) : (index, memref<index>) -> ()
      %113 = "arith.addi"(%2, %0) : (index, index) -> index
      %114 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%2, %113, %114) ({
      ^bb0(%arg5: index):
        %131 = "memref.load"(%25, %arg4, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        %132 = "memref.load"(%111) : (memref<index>) -> index
        "memref.store"(%131, %110, %132) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
        %133 = "arith.constant"() <{value = 1 : index}> : () -> index
        %134 = "arith.addi"(%132, %133) : (index, index) -> index
        "memref.store"(%134, %111) : (index, memref<index>) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      %115 = "polygeist.get_func"() <{name = @__arts_edt_5}> : () -> !llvm.ptr<!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>
      %116 = "polygeist.pointer2memref"(%115) : (!llvm.ptr<!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>) -> memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>
      %117 = "func.call"(%116, %80, %109, %110, %102, %79) <{callee = @artsEdtCreateWithEpoch}> : (memref<?x!llvm.func<void (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>)>>, i32, i32, memref<?xi64>, i32, i64) -> i64
      %118 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      "memref.store"(%84, %118) : (index, memref<index>) -> ()
      %119 = "arith.addi"(%2, %0) : (index, index) -> index
      %120 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%2, %119, %120) ({
      ^bb0(%arg5: index):
        %131 = "memref.load"(%29, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index) -> i64
        %132 = "memref.load"(%118) : (memref<index>) -> index
        %133 = "memref.load"(%21, %78, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        %134 = "arith.index_cast"(%132) : (index) -> i32
        "func.call"(%131, %117, %134, %133) <{callee = @artsAddDependenceToPersistentEvent}> : (i64, i64, i32, i64) -> ()
        %135 = "arith.constant"() <{value = 1 : index}> : () -> index
        %136 = "arith.addi"(%132, %135) : (index, index) -> index
        "memref.store"(%136, %118) : (index, memref<index>) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      %121 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      "memref.store"(%89, %121) : (index, memref<index>) -> ()
      %122 = "arith.addi"(%2, %0) : (index, index) -> index
      %123 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%2, %122, %123) ({
      ^bb0(%arg5: index):
        %131 = "memref.load"(%29, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index) -> i64
        %132 = "memref.load"(%121) : (memref<index>) -> index
        %133 = "memref.load"(%21, %arg4, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        %134 = "arith.index_cast"(%132) : (index) -> i32
        "func.call"(%131, %117, %134, %133) <{callee = @artsAddDependenceToPersistentEvent}> : (i64, i64, i32, i64) -> ()
        %135 = "arith.constant"() <{value = 1 : index}> : () -> index
        %136 = "arith.addi"(%132, %135) : (index, index) -> index
        "memref.store"(%136, %121) : (index, memref<index>) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      %124 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      "memref.store"(%94, %124) : (index, memref<index>) -> ()
      %125 = "arith.addi"(%2, %0) : (index, index) -> index
      %126 = "arith.constant"() <{value = 1 : index}> : () -> index
      "scf.for"(%2, %125, %126) ({
      ^bb0(%arg5: index):
        %131 = "memref.load"(%25, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index) -> i64
        %132 = "memref.load"(%124) : (memref<index>) -> index
        %133 = "memref.load"(%14, %arg4, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        %134 = "arith.index_cast"(%132) : (index) -> i32
        "func.call"(%131, %117, %134, %133) <{callee = @artsAddDependenceToPersistentEvent}> : (i64, i64, i32, i64) -> ()
        %135 = "arith.constant"() <{value = 1 : index}> : () -> index
        %136 = "arith.addi"(%132, %135) : (index, index) -> index
        "memref.store"(%136, %124) : (index, memref<index>) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index) -> ()
      %127 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
      "memref.store"(%94, %127) : (index, memref<index>) -> ()
      %128 = "arith.addi"(%2, %0) : (index, index) -> index
      %129 = "arith.constant"() <{value = 1 : index}> : () -> index
      %130 = "scf.for"(%2, %128, %129, %127) ({
      ^bb0(%arg5: index, %arg6: memref<index>):
        %131 = "memref.load"(%25, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index) -> i64
        %132 = "memref.load"(%14, %arg4, %arg5) <{nontemporal = false}> : (memref<?x?xi64>, index, index) -> i64
        "func.call"(%131, %132) <{callee = @artsPersistentEventIncrementLatch}> : (i64, i64) -> ()
        %133 = "memref.load"(%arg6) : (memref<index>) -> index
        %134 = "arith.constant"() <{value = 1 : index}> : () -> index
        %135 = "arith.addi"(%133, %134) : (index, index) -> index
        "memref.store"(%135, %arg6) : (index, memref<index>) -> ()
        "scf.yield"(%arg6) : (memref<index>) -> ()
      }) : (index, index, index, memref<index>) -> memref<index>
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
  "func.func"() <{function_type = (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>) -> (), sym_name = "__arts_edt_3", sym_visibility = "private"}> ({
  ^bb0(%arg0: i32, %arg1: memref<?xi64>, %arg2: i32, %arg3: memref<?x!llvm.struct<(i64, i32, ptr)>>):
    %0 = "arith.constant"() <{value = 0 : index}> : () -> index
    %1 = "arith.constant"() <{value = 10 : index}> : () -> index
    %2 = "arith.constant"() <{value = 1 : index}> : () -> index
    %3 = "arith.constant"() <{value = 0 : index}> : () -> index
    %4 = "memref.load"(%arg1, %3) <{nontemporal = false}> : (memref<?xi64>, index) -> i64
    %5 = "arith.trunci"(%4) : (i64) -> i32
    %6 = "arith.constant"() <{value = 0 : index}> : () -> index
    %7 = "arith.constant"() <{value = 1 : index}> : () -> index
    %8 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%6, %8) : (index, memref<index>) -> ()
    %9 = "polygeist.typeSize"() <{source = !llvm.struct<(i64, i32, ptr)>}> : () -> index
    %10 = "polygeist.memref2pointer"(%arg3) : (memref<?x!llvm.struct<(i64, i32, ptr)>>) -> !llvm.ptr
    %11 = "arith.constant"() <{value = 10 : index}> : () -> index
    %12 = "arith.constant"() <{value = 0 : index}> : () -> index
    %13 = "memref.alloca"(%11) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
    %14 = "memref.alloca"(%11) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xmemref<?xi8>>
    %15 = "arith.constant"() <{value = 0 : index}> : () -> index
    "scf.for"(%15, %11, %7) ({
    ^bb0(%arg4: index):
      %22 = "memref.load"(%8) : (memref<index>) -> index
      %23 = "arith.muli"(%22, %9) : (index, index) -> index
      %24 = "arith.index_cast"(%23) : (index) -> i32
      %25 = "llvm.getelementptr"(%10, %24) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %26 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %27 = "llvm.getelementptr"(%25, %26) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 0>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %28 = "llvm.load"(%27) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
      %29 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %30 = "arith.constant"() <{value = 2 : i32}> : () -> i32
      %31 = "llvm.getelementptr"(%25, %29) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 2>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %32 = "llvm.load"(%31) <{ordering = 0 : i64}> : (!llvm.ptr) -> memref<?xi8>
      "memref.store"(%28, %13, %arg4) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
      "memref.store"(%32, %14, %arg4) <{nontemporal = false}> : (memref<?xi8>, memref<?xmemref<?xi8>>, index) -> ()
      %33 = "arith.addi"(%22, %7) : (index, index) -> index
      "memref.store"(%33, %8) : (index, memref<index>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    "scf.for"(%0, %1, %2) ({
    ^bb0(%arg4: index):
      %22 = "arith.index_cast"(%arg4) : (index) -> i32
      %23 = "arith.addi"(%5, %22) : (i32, i32) -> i32
      %24 = "arith.sitofp"(%23) : (i32) -> f64
      %25 = "polygeist.subindex"(%14, %arg4) : (memref<?xmemref<?xi8>>, index) -> memref<memref<?xi8>>
      %26 = "polygeist.memref2pointer"(%25) : (memref<memref<?xi8>>) -> !llvm.ptr
      %27 = "llvm.load"(%26) <{ordering = 0 : i64}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%24, %27) <{ordering = 0 : i64}> : (f64, !llvm.ptr) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %16 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    %17 = "arith.constant"() <{value = 1 : index}> : () -> index
    "memref.store"(%17, %16) : (index, memref<index>) -> ()
    %18 = "polygeist.memref2pointer"(%arg1) : (memref<?xi64>) -> !llvm.ptr
    %19 = "arith.constant"() <{value = 0 : index}> : () -> index
    %20 = "arith.constant"() <{value = 1 : index}> : () -> index
    %21 = "scf.for"(%19, %11, %20, %16) ({
    ^bb0(%arg4: index, %arg5: memref<index>):
      %22 = "memref.load"(%arg5) : (memref<index>) -> index
      %23 = "arith.index_cast"(%22) : (index) -> i32
      %24 = "llvm.getelementptr"(%18, %23) <{elem_type = i64, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %25 = "llvm.load"(%24) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
      %26 = "polygeist.subindex"(%13, %arg4) : (memref<?xi64>, index) -> memref<i64>
      %27 = "memref.load"(%26) : (memref<i64>) -> i64
      "func.call"(%25, %27) <{callee = @artsPersistentEventDecrementLatch}> : (i64, i64) -> ()
      %28 = "arith.constant"() <{value = 1 : index}> : () -> index
      %29 = "arith.addi"(%22, %28) : (index, index) -> index
      "memref.store"(%29, %arg5) : (index, memref<index>) -> ()
      "scf.yield"(%arg5) : (memref<index>) -> ()
    }) : (index, index, index, memref<index>) -> memref<index>
    "func.return"() : () -> ()
  }) : () -> ()
  "func.func"() <{function_type = (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>) -> (), sym_name = "__arts_edt_4", sym_visibility = "private"}> ({
  ^bb0(%arg0: i32, %arg1: memref<?xi64>, %arg2: i32, %arg3: memref<?x!llvm.struct<(i64, i32, ptr)>>):
    %0 = "arith.constant"() <{value = 0 : index}> : () -> index
    %1 = "arith.constant"() <{value = 10 : index}> : () -> index
    %2 = "arith.constant"() <{value = 1 : index}> : () -> index
    %3 = "arith.constant"() <{value = 0 : index}> : () -> index
    %4 = "arith.constant"() <{value = 1 : index}> : () -> index
    %5 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%3, %5) : (index, memref<index>) -> ()
    %6 = "polygeist.typeSize"() <{source = !llvm.struct<(i64, i32, ptr)>}> : () -> index
    %7 = "polygeist.memref2pointer"(%arg3) : (memref<?x!llvm.struct<(i64, i32, ptr)>>) -> !llvm.ptr
    %8 = "arith.constant"() <{value = 10 : index}> : () -> index
    %9 = "arith.constant"() <{value = 0 : index}> : () -> index
    %10 = "memref.alloca"(%8) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
    %11 = "memref.alloca"(%8) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xmemref<?xi8>>
    %12 = "arith.constant"() <{value = 0 : index}> : () -> index
    "scf.for"(%12, %8, %4) ({
    ^bb0(%arg4: index):
      %24 = "memref.load"(%5) : (memref<index>) -> index
      %25 = "arith.muli"(%24, %6) : (index, index) -> index
      %26 = "arith.index_cast"(%25) : (index) -> i32
      %27 = "llvm.getelementptr"(%7, %26) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %28 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %29 = "llvm.getelementptr"(%27, %28) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 0>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %30 = "llvm.load"(%29) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
      %31 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %32 = "arith.constant"() <{value = 2 : i32}> : () -> i32
      %33 = "llvm.getelementptr"(%27, %31) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 2>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %34 = "llvm.load"(%33) <{ordering = 0 : i64}> : (!llvm.ptr) -> memref<?xi8>
      "memref.store"(%30, %10, %arg4) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
      "memref.store"(%34, %11, %arg4) <{nontemporal = false}> : (memref<?xi8>, memref<?xmemref<?xi8>>, index) -> ()
      %35 = "arith.addi"(%24, %4) : (index, index) -> index
      "memref.store"(%35, %5) : (index, memref<index>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %13 = "arith.constant"() <{value = 10 : index}> : () -> index
    %14 = "arith.constant"() <{value = 0 : index}> : () -> index
    %15 = "memref.alloca"(%13) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
    %16 = "memref.alloca"(%13) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xmemref<?xi8>>
    %17 = "arith.constant"() <{value = 0 : index}> : () -> index
    "scf.for"(%17, %13, %4) ({
    ^bb0(%arg4: index):
      %24 = "memref.load"(%5) : (memref<index>) -> index
      %25 = "arith.muli"(%24, %6) : (index, index) -> index
      %26 = "arith.index_cast"(%25) : (index) -> i32
      %27 = "llvm.getelementptr"(%7, %26) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %28 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %29 = "llvm.getelementptr"(%27, %28) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 0>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %30 = "llvm.load"(%29) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
      %31 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %32 = "arith.constant"() <{value = 2 : i32}> : () -> i32
      %33 = "llvm.getelementptr"(%27, %31) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 2>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %34 = "llvm.load"(%33) <{ordering = 0 : i64}> : (!llvm.ptr) -> memref<?xi8>
      "memref.store"(%30, %15, %arg4) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
      "memref.store"(%34, %16, %arg4) <{nontemporal = false}> : (memref<?xi8>, memref<?xmemref<?xi8>>, index) -> ()
      %35 = "arith.addi"(%24, %4) : (index, index) -> index
      "memref.store"(%35, %5) : (index, memref<index>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    "scf.for"(%0, %1, %2) ({
    ^bb0(%arg4: index):
      %24 = "polygeist.subindex"(%16, %arg4) : (memref<?xmemref<?xi8>>, index) -> memref<memref<?xi8>>
      %25 = "polygeist.memref2pointer"(%24) : (memref<memref<?xi8>>) -> !llvm.ptr
      %26 = "llvm.load"(%25) <{ordering = 0 : i64}> : (!llvm.ptr) -> !llvm.ptr
      %27 = "llvm.load"(%26) <{ordering = 0 : i64}> : (!llvm.ptr) -> f64
      %28 = "polygeist.subindex"(%11, %arg4) : (memref<?xmemref<?xi8>>, index) -> memref<memref<?xi8>>
      %29 = "polygeist.memref2pointer"(%28) : (memref<memref<?xi8>>) -> !llvm.ptr
      %30 = "llvm.load"(%29) <{ordering = 0 : i64}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%27, %30) <{ordering = 0 : i64}> : (f64, !llvm.ptr) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %18 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    %19 = "arith.constant"() <{value = 0 : index}> : () -> index
    "memref.store"(%19, %18) : (index, memref<index>) -> ()
    %20 = "polygeist.memref2pointer"(%arg1) : (memref<?xi64>) -> !llvm.ptr
    %21 = "arith.constant"() <{value = 0 : index}> : () -> index
    %22 = "arith.constant"() <{value = 1 : index}> : () -> index
    %23 = "scf.for"(%21, %8, %22, %18) ({
    ^bb0(%arg4: index, %arg5: memref<index>):
      %24 = "memref.load"(%arg5) : (memref<index>) -> index
      %25 = "arith.index_cast"(%24) : (index) -> i32
      %26 = "llvm.getelementptr"(%20, %25) <{elem_type = i64, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %27 = "llvm.load"(%26) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
      %28 = "polygeist.subindex"(%10, %arg4) : (memref<?xi64>, index) -> memref<i64>
      %29 = "memref.load"(%28) : (memref<i64>) -> i64
      "func.call"(%27, %29) <{callee = @artsPersistentEventDecrementLatch}> : (i64, i64) -> ()
      %30 = "arith.constant"() <{value = 1 : index}> : () -> index
      %31 = "arith.addi"(%24, %30) : (index, index) -> index
      "memref.store"(%31, %arg5) : (index, memref<index>) -> ()
      "scf.yield"(%arg5) : (memref<index>) -> ()
    }) : (index, index, index, memref<index>) -> memref<index>
    "func.return"() : () -> ()
  }) : () -> ()
  "func.func"() <{function_type = (i32, memref<?xi64>, i32, memref<?x!llvm.struct<(i64, i32, ptr)>>) -> (), sym_name = "__arts_edt_5", sym_visibility = "private"}> ({
  ^bb0(%arg0: i32, %arg1: memref<?xi64>, %arg2: i32, %arg3: memref<?x!llvm.struct<(i64, i32, ptr)>>):
    %0 = "arith.constant"() <{value = 0 : index}> : () -> index
    %1 = "arith.constant"() <{value = 10 : index}> : () -> index
    %2 = "arith.constant"() <{value = 1 : index}> : () -> index
    %3 = "arith.constant"() <{value = 0 : index}> : () -> index
    %4 = "arith.constant"() <{value = 1 : index}> : () -> index
    %5 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    "memref.store"(%3, %5) : (index, memref<index>) -> ()
    %6 = "polygeist.typeSize"() <{source = !llvm.struct<(i64, i32, ptr)>}> : () -> index
    %7 = "polygeist.memref2pointer"(%arg3) : (memref<?x!llvm.struct<(i64, i32, ptr)>>) -> !llvm.ptr
    %8 = "arith.constant"() <{value = 10 : index}> : () -> index
    %9 = "arith.constant"() <{value = 0 : index}> : () -> index
    %10 = "memref.alloca"(%8) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
    %11 = "memref.alloca"(%8) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xmemref<?xi8>>
    %12 = "arith.constant"() <{value = 0 : index}> : () -> index
    "scf.for"(%12, %8, %4) ({
    ^bb0(%arg4: index):
      %29 = "memref.load"(%5) : (memref<index>) -> index
      %30 = "arith.muli"(%29, %6) : (index, index) -> index
      %31 = "arith.index_cast"(%30) : (index) -> i32
      %32 = "llvm.getelementptr"(%7, %31) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %33 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %34 = "llvm.getelementptr"(%32, %33) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 0>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %35 = "llvm.load"(%34) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
      %36 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %37 = "arith.constant"() <{value = 2 : i32}> : () -> i32
      %38 = "llvm.getelementptr"(%32, %36) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 2>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %39 = "llvm.load"(%38) <{ordering = 0 : i64}> : (!llvm.ptr) -> memref<?xi8>
      "memref.store"(%35, %10, %arg4) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
      "memref.store"(%39, %11, %arg4) <{nontemporal = false}> : (memref<?xi8>, memref<?xmemref<?xi8>>, index) -> ()
      %40 = "arith.addi"(%29, %4) : (index, index) -> index
      "memref.store"(%40, %5) : (index, memref<index>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %13 = "arith.constant"() <{value = 10 : index}> : () -> index
    %14 = "arith.constant"() <{value = 0 : index}> : () -> index
    %15 = "memref.alloca"(%13) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
    %16 = "memref.alloca"(%13) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xmemref<?xi8>>
    %17 = "arith.constant"() <{value = 0 : index}> : () -> index
    "scf.for"(%17, %13, %4) ({
    ^bb0(%arg4: index):
      %29 = "memref.load"(%5) : (memref<index>) -> index
      %30 = "arith.muli"(%29, %6) : (index, index) -> index
      %31 = "arith.index_cast"(%30) : (index) -> i32
      %32 = "llvm.getelementptr"(%7, %31) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %33 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %34 = "llvm.getelementptr"(%32, %33) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 0>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %35 = "llvm.load"(%34) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
      %36 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %37 = "arith.constant"() <{value = 2 : i32}> : () -> i32
      %38 = "llvm.getelementptr"(%32, %36) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 2>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %39 = "llvm.load"(%38) <{ordering = 0 : i64}> : (!llvm.ptr) -> memref<?xi8>
      "memref.store"(%35, %15, %arg4) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
      "memref.store"(%39, %16, %arg4) <{nontemporal = false}> : (memref<?xi8>, memref<?xmemref<?xi8>>, index) -> ()
      %40 = "arith.addi"(%29, %4) : (index, index) -> index
      "memref.store"(%40, %5) : (index, memref<index>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %18 = "arith.constant"() <{value = 10 : index}> : () -> index
    %19 = "arith.constant"() <{value = 0 : index}> : () -> index
    %20 = "memref.alloca"(%18) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
    %21 = "memref.alloca"(%18) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xmemref<?xi8>>
    %22 = "arith.constant"() <{value = 0 : index}> : () -> index
    "scf.for"(%22, %18, %4) ({
    ^bb0(%arg4: index):
      %29 = "memref.load"(%5) : (memref<index>) -> index
      %30 = "arith.muli"(%29, %6) : (index, index) -> index
      %31 = "arith.index_cast"(%30) : (index) -> i32
      %32 = "llvm.getelementptr"(%7, %31) <{elem_type = i8, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %33 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %34 = "llvm.getelementptr"(%32, %33) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 0>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %35 = "llvm.load"(%34) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
      %36 = "arith.constant"() <{value = 0 : i32}> : () -> i32
      %37 = "arith.constant"() <{value = 2 : i32}> : () -> i32
      %38 = "llvm.getelementptr"(%32, %36) <{elem_type = !llvm.struct<(i64, i32, ptr)>, rawConstantIndices = array<i32: -2147483648, 2>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %39 = "llvm.load"(%38) <{ordering = 0 : i64}> : (!llvm.ptr) -> memref<?xi8>
      "memref.store"(%35, %20, %arg4) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
      "memref.store"(%39, %21, %arg4) <{nontemporal = false}> : (memref<?xi8>, memref<?xmemref<?xi8>>, index) -> ()
      %40 = "arith.addi"(%29, %4) : (index, index) -> index
      "memref.store"(%40, %5) : (index, memref<index>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    "scf.for"(%0, %1, %2) ({
    ^bb0(%arg4: index):
      %29 = "polygeist.subindex"(%16, %arg4) : (memref<?xmemref<?xi8>>, index) -> memref<memref<?xi8>>
      %30 = "polygeist.memref2pointer"(%29) : (memref<memref<?xi8>>) -> !llvm.ptr
      %31 = "llvm.load"(%30) <{ordering = 0 : i64}> : (!llvm.ptr) -> !llvm.ptr
      %32 = "llvm.load"(%31) <{ordering = 0 : i64}> : (!llvm.ptr) -> f64
      %33 = "polygeist.subindex"(%11, %arg4) : (memref<?xmemref<?xi8>>, index) -> memref<memref<?xi8>>
      %34 = "polygeist.memref2pointer"(%33) : (memref<memref<?xi8>>) -> !llvm.ptr
      %35 = "llvm.load"(%34) <{ordering = 0 : i64}> : (!llvm.ptr) -> !llvm.ptr
      %36 = "llvm.load"(%35) <{ordering = 0 : i64}> : (!llvm.ptr) -> f64
      %37 = "arith.addf"(%32, %36) <{fastmath = #arith.fastmath<none>}> : (f64, f64) -> f64
      %38 = "polygeist.subindex"(%21, %arg4) : (memref<?xmemref<?xi8>>, index) -> memref<memref<?xi8>>
      %39 = "polygeist.memref2pointer"(%38) : (memref<memref<?xi8>>) -> !llvm.ptr
      %40 = "llvm.load"(%39) <{ordering = 0 : i64}> : (!llvm.ptr) -> !llvm.ptr
      "llvm.store"(%37, %40) <{ordering = 0 : i64}> : (f64, !llvm.ptr) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index) -> ()
    %23 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<index>
    %24 = "arith.constant"() <{value = 0 : index}> : () -> index
    "memref.store"(%24, %23) : (index, memref<index>) -> ()
    %25 = "polygeist.memref2pointer"(%arg1) : (memref<?xi64>) -> !llvm.ptr
    %26 = "arith.constant"() <{value = 0 : index}> : () -> index
    %27 = "arith.constant"() <{value = 1 : index}> : () -> index
    %28 = "scf.for"(%26, %18, %27, %23) ({
    ^bb0(%arg4: index, %arg5: memref<index>):
      %29 = "memref.load"(%arg5) : (memref<index>) -> index
      %30 = "arith.index_cast"(%29) : (index) -> i32
      %31 = "llvm.getelementptr"(%25, %30) <{elem_type = i64, rawConstantIndices = array<i32: -2147483648>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %32 = "llvm.load"(%31) <{ordering = 0 : i64}> : (!llvm.ptr) -> i64
      %33 = "polygeist.subindex"(%20, %arg4) : (memref<?xi64>, index) -> memref<i64>
      %34 = "memref.load"(%33) : (memref<i64>) -> i64
      "func.call"(%32, %34) <{callee = @artsPersistentEventDecrementLatch}> : (i64, i64) -> ()
      %35 = "arith.constant"() <{value = 1 : index}> : () -> index
      %36 = "arith.addi"(%29, %35) : (index, index) -> index
      "memref.store"(%36, %arg5) : (index, memref<index>) -> ()
      "scf.yield"(%arg5) : (memref<index>) -> ()
    }) : (index, index, index, memref<index>) -> memref<index>
    "func.return"() : () -> ()
  }) : () -> ()
  "func.func"() <{function_type = (i32, i32, memref<?xmemref<?xi8>>) -> (), sym_name = "initPerWorker"}> ({
  ^bb0(%arg0: i32, %arg1: i32, %arg2: memref<?xmemref<?xi8>>):
    "func.return"() : () -> ()
  }) : () -> ()
  "func.func"() <{function_type = (i32, i32, memref<?xmemref<?xi8>>) -> (), sym_name = "initPerNode"}> ({
  ^bb0(%arg0: i32, %arg1: i32, %arg2: memref<?xmemref<?xi8>>):
    %0 = "arith.index_cast"(%arg0) : (i32) -> index
    %1 = "arith.constant"() <{value = 1 : index}> : () -> index
    %2 = "arith.cmpi"(%0, %1) <{predicate = 9 : i64}> : (index, index) -> i1
    "cf.cond_br"(%2, %arg1, %arg2)[^bb1, ^bb2] <{operandSegmentSizes = array<i32: 1, 0, 2>}> : (i1, i32, memref<?xmemref<?xi8>>) -> ()
  ^bb1:  // pred: ^bb0
    "func.return"() : () -> ()
  ^bb2(%3: i32, %4: memref<?xmemref<?xi8>>):  // pred: ^bb0
    %5 = "func.call"() <{callee = @mainBody}> : () -> i32
    "func.call"() <{callee = @artsShutdown}> : () -> ()
    "func.return"() : () -> ()
  }) : () -> ()
  "func.func"() <{function_type = (i32, memref<?xmemref<?xi8>>) -> i32, sym_name = "main"}> ({
  ^bb0(%arg0: i32, %arg1: memref<?xmemref<?xi8>>):
    %0 = "func.call"(%arg0, %arg1) <{callee = @artsRT}> : (i32, memref<?xmemref<?xi8>>) -> i32
    %1 = "arith.constant"() <{value = 0 : i32}> : () -> i32
    "func.return"(%1) : (i32) -> ()
  }) : () -> ()
}) {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} : () -> ()
Failed to emit LLVM IR
make: *** [Makefile:16: matrix.ll] Error 255
rm matrix.mlir
